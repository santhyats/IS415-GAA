---
title: "3. 1st Order Spatial Point Patterns Analysis Methods"
author: "Santhya Selvan"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 3.1 Overview

Spatial Point Pattern Analysis helps us to evaluate the patter or distribution of a set of points. The points can be locations of events (like accidents, crimes, etc.) and places of business (like retail, services etc.)

In this hands-on, I will look into the spatial point processes of childcare centers in Singapore with the help of suitable functions from of [spatstat](https://cran.r-project.org/web/packages/spatstat/). Mainly, this exercise seeks to find:

-   If the childcare centres in Singapore [randomly distributed]{.underline} throughout the country,

-   If no, then where are the locations with higher concentration of childcare centres?

Let's start exploring :)

## 3.2 The data

In this exercise, I will be making use of these datasets:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## 3.3 Installing and Loading the R packages

In this hands-on exercise, five R packages will be used:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

Let's install them first

```{r}
pacman::p_load(sf, spatstat, raster, tidyverse, tmap)
```

## 3.4 Data Wrangling

### 3.4.1 Importing the Spatial Data

I will use [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import the three geospatial data sets into R.

```{r}

childcare_sf <- st_read("data4/child-care-services-geojson.geojson") %>% st_transform(crs = 3414)
```

```{r}
coastal_sf <- st_read(dsn = "data4/",
                      layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data4/",
                   layer = "MP14_SUBZONE_WEB_PL")
```

Before doing further analysis, I will check the information of the reference system of the data sets so that we can make changes (if necessary) and ensure that all the datasets make use of the proper crs.

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(coastal_sf)
```

```{r}
st_crs(mpsz_sf)
```

From the results, we notice that only the `childcare_sf` dataframe has the standard coordinate system. As such, I will be modifying the other two data frames so that all three of them will be consistent.

```{r}
coastal_sf <- st_transform(coastal_sf, crs = 3414)
```

```{r}
mpsz_sf <- st_transform(mpsz_sf, crs = 3414)
```

### 3.4.2 Mapping the Geospatial Datasets

We will map the datasets together so we can better see the spatial pattern of the childcare centers.

```{r}
tmap_mode("plot")
tm_shape(coastal_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() +
tm_shape(childcare_sf) + tm_dots() 
```

We are able to plot all the data sets on the same map because we have ensured that their referencing systems are consistent with one another. This allows me to further appreciate the value of ensuring the referencing systems of the datasets before we begin our analysis.

Alternatively, we can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode('plot')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode("plot")
```

## 3.5 Geospatial Data Wrangling

#### 3.5.1 Converting simple dataframe to spatstat's ppp object with the as.ppp() function.

We can create the ppp object by providing the point coordinates and the observation window.

```{r}
childcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))
```

```{r}
plot(childcare_ppp)
```

We can take a look at the summary statistics of the newly created ppp object:

```{r}
summary(childcare_ppp)
```

We see that there is a warning message indicating that there are duplicates in the pattern. This is a significant issue in spatial point pattern analysis. How do we then handle them?

#### 3.5.2 Handling Duplicates

We can check for duplication using this code:

```{r}
any(duplicated(childcare_ppp))
```

Since the check has returned TRUE, we will further seek to find the the number of co-indicence points using the  `multiplicity()` function.

```{r}
multiplicity(childcare_ppp)
```

We can also find out how man locations have more than one point events.

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

From the output, we see that there are 128 duplicated point events. To see the locations of these, we will plot them out.\

```{r}
tmap_mode('plot')
tm_shape(childcare_sf) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode("plot")
```

There are three ways to overcome this problem:

-   We can easily delete the duplicates. But, that will also mean that some useful point events will be lost.

-   The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

-   The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

We can once again check if there are any duplicates in our newly created dataset.

```{r}
any(duplicated(childcare_ppp_jit))
```

#### 3.5.3 Creating *owin* object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

Because we already have the dataframe for Singapore's Coastline, we will use that (`coastal_sf`) and convert it into an owin object.

```{r}
coastal_owin <- as.owin(coastal_sf)
plot(coastal_owin)
```

Here is the summary for the owin object

```{r}
summary(coastal_owin)
```

#### 3.5.6 Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore.

```{r}
childcareSG_ppp = childcare_ppp[coastal_owin]
```

```{r}
summary(childcareSG_ppp)
```

We will plot this newly created object

```{r}
plot(childcareSG_ppp)
```

## **3.6 First-order Spatial Point Patterns Analysis**

I will now perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

#### 3.6.1 Kernel Density Estimation

##### 3.6.1.1 Computing kernel density estimation using automatic bandwidth selection method

We can compute a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

We will now plot this

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”. In the next section, we will look at how we can change the scale.

##### 3.6.1.2 Rescaling KDE values

We will use the *rescale.ppp()* function to covert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can re-run *density()* using the resale data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

#### 3.6.2 Working with different automatic bandwidth methods

Beside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods.

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.

The code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

#### 3.6.3 Working with different Kernel Methods

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics. We can compute three more kernel density estimations using these methods:

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## 3.7 Fixed and Adaptive KDE

#### 3.7.1 Computing KDE using Fixed bandwidth

Next, we will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

#### 3.7.2 Computing KDE using Adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skewed distribution of spatial point patterns. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, you will derive the adaptive kernel density estimation by using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")  
plot(kde_childcareSG_adaptive)
```

We can now compare the two maps side-by-side

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

3.7.3 Converting KDE output into grid object

Although the output will have no difference, we will convert it to a grid object so that it will be more suitable with mapping applications.

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

3.7.2.1 Converting gridded output to Raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Here are the properties of the raster object:

```{r}
kde_childcareSG_bw_raster
```

Note that the crs is 'NA'. Hence, I will assign a projection system to the object.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

#### 3.7.3 Visualising the output in tmap

I will use the code chunk below to visualise the raster object

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### 3.7.4 Comparing Spatial Point Patterns using KDE

In this section, I will compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

We will firstly extract the study areas using this code:

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

We can plot these study areas

```{r}
par(mfrow=c(2,2))
plot(st_geometry(pg), main = "Ponggol")
plot(st_geometry(tm), main="Tampines")
plot(st_geometry(ck), main="Choa Chu Kang")
plot(st_geometry(jw), main="Jurong West")
```

##### 3.7.4.1 Creating ***owin*** object

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

##### 3.7.4.2 Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

We will now plot these four study areas and their childcare center locations.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

##### 3.7.4.3 Computing KDE

We will use bw.diggle() to come up with the bandwidth of each.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

##### 3.7.4.4 Computing KDE with fixed bandwidth

We will use 250m as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## 3.8 Nearest Neighbour Analysis

Here, I will be performing the Clark-Evans test of aggregation for a spatial point pattern by using the [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) function of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

From the results, we are able to see that the spatial points are not randomly distributed and in fact follow a clustered patters, as seen from the extremely small p-value and the R-value being less than 1.

#### 3.8.1 Clark Evans Test for Planning Area: Choa Chu Kang, Tampines

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## 3.9 Second Order Spatial Point Pattern Analysis

#### 3.9.1 Analysing Spatial Point Pattern using G- Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I will compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. I will also perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

##### 3.9.1.1 Choa Chu Kang Planning Area

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

##### 3.9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

We will use the Monte Carlo test with the G-function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

3.9.1.3 Tampines Planning Area

We will replicate the code chunk above to perform the test for the Tampines Planning Area as well.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)

```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

#### 3.9.2 Analysing Spatial Point Patterns Using F-function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package, and the [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html)from before.

##### 3.9.2.1 Choa Chu Kang

We will first compute the F-function estimation using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

We will once again perform the Monte Carlo test with F-function:

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

##### 3.9.2.2 Tampines Planning Area

We will do the same 2 steps for the Tampines Planning Area.

```{r}
F_TM = Fest(childcare_tm_ppp)
plot(F_TM)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
F_TM.csr <- envelope(childcare_tm_ppp, Fest, nsim = 999)
```

```{r}
plot(F_TM.csr)
```

#### 3.9.3 Analyising Spatial Point Patterns Using K-function

K-function measures the number of events found up to a given distance of any particular event. In this section, we will compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. We will once again use *envelope()* to perform the Monte Carlo test.

##### 3.9.3.1 Choa Chu Kang Planning Area

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

##### 3.9.3.2 Tampines Planning Area

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

#### 3.9.4 Analysing Spatial Point Patterns using the L function

Here, we will compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. We will also be performing the Monte Carlo Test.

##### 3.9.4.1 Choa Chu Kang Planning Area

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

##### 3.9.4.2 Tampines Planning Area

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
