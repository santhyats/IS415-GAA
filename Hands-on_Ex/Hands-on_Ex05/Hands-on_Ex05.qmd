---
title: "5 Spatial Weights and Application"
author: "Santhya Selvan"
date: "September 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 5.1 Overview

In this exercise, I will be computing spatial weights using R. The main learning points are:

-   To perform relational joints using appropriate join function of the **dplyr** package

-   Using the appropriate functions of the **spdep** package to:

    -   compute spatial weights

    -   calculate spatially lagged variables

I will install the needed packages into our R environment first.

```{r}
pacman::p_load(sf, tidyverse, spdep, tmap, knitr)
```

## 5.2 Importing and Preparing Data

In this exercise, I will be using the following datasets:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

#### 5.2.1 Importing the shapefile

*st_read()* of the **sf** package is used to import the shapefile into R. We will save it to a variable `hunan`.

```{r}
hunan <- st_read(dsn="data/geospatial",
                 layer="Hunan")
```

#### 5.2.2 Importing the CSV

I will import the csv file using the *read_csv()* function of the **readr** package and save it to a variable named `hunan2012.`

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

#### 5.2.3 Performing relational join

The code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, hunan2012) %>% 
  select(1:4, 7, 15)
```

## 5.3 Visualising Regional Development Indicator

Now, I am going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 5.4 Computing Contiguity Spatial Weights

Contiguity is the idea of spatial objects being in neighbours or in contact with one another. There are different types of contiguity to reference the neighbors and one of the types in the Queen contiguity, which refers to neighbors of the spatial object both adjacent and diagonally.

In this section, I will use  [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function takes in an argument, queen. If the queen argument is not set to FALSE, the list of neighbors will be computed with the queen criteria by default.

#### 5.4.1 Computing Contiguity Neighbours - QUEEN

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The code output above shows that there are a total of 88 spatial objects in hunan as well as the the most connected regions with it's corresponding number of links. It also shows us that there are 2 regions with the least connections of 1 link each.

To see the neighbours of each spatial object, we can simply call the variable and indicate the index. For example, to see the neighbours of the 1st polygon:

```{r}
wm_q[1]
```

We are also able to view other details of this polygon and its neighbours using the following codes:

-   to retrieve the county name of the polygon

```{r}
hunan$County[1]
```

-   retrieve the county names of its neighbors

```{r}
hunan$NAME_3[c(2, 3,  4,  57,  85)]
```

-   the GDPPCs of the five counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

-   view the complete weights matrix of all the spatial objects using *str()*.

```{r}
str(wm_q)
```

#### 5.4.2 Computing Contiguity Neighbors - ROOK

Another type of contiguity in spatial objects is Rook, which indicates the neighbors that are directly adjacent to the spatial object horizontally and vertically, but does not account for the diagonal neighbors. In this section, we will be computing the contiguity of the spatial objects using the Rook method.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

#### 5.4.3 Visualising Contiguity Graphs

In order to visualise the contiguity graphs, we need them to be in the form of a connectivity graph, which is essentially points connected to each of it's neighbours with lines. As of currently, our spatial objects are in the form of polygons, and hence will need to be converted to points before we can derive the connectivity graph.

To get points that represent the polygons, we will use the centroids of the polygons. Here are the steps used to derive them:

1.  Extract the Longitude and Latitude values of the polygons into a separate dataframe using the *st_centroid()* and *map_dbl()* functions.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Once we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

#### 5.4.3.1 Mapping the Queen contiguity based neighbors map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "navy")
```

#### 5.4.3.2 Mapping the Rook contiguity based neighbors map

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```

Here are the graphs side-by-side:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "navy")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```

## 5.5 Computing Distance-based Neighbours

In this section, I will derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. 

#### 5.5.1 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

From the results, we will use the largest distance of 61.79km as the upper threshold.

#### 5.5.2 Computing fixed distance weights matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

We will display the full weights matrix by using *str()*

```{r}
str(wm_d62)
```

#### 5.5.3 Computing fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="purple", length=0.08)
```

The purple lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

#### 5.5.4 Computing Adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We can once again use str() to display the contents of the matrix

```{r}
str(knn6)
```

Using the code chunk below, we can plot the distance-based neighbors

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```

## 5.6 Computing weights based on IDW

In this section, we will derive spatial weight matrix by using the inverse distance method. Firstly, we compute the distances using nbdists().

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## 5.7 Row-standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weights of the first polygon's neighbours:

```{r}
rswm_q$weights[1]
```

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

## 5.8 Applications of Spatial Weights Matrix

In this section, I will create 4 different types of spatially lagged variables:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum.

#### 5.8.1 Spatial lag with row-standardised weights

We will compute the average neighbor GDPPC value for each polygon. These values are also referred to as spatially lagged values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

We can append the spatially lagged GDPPC values onto hunan sf dataframe using the code chunk below

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

We will now plot both the GDPPC and spatial lag GDPPC to compare

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

#### 5.8.2 Spatial lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

We will now appends the lag_sum GDPPC field to the hunan dataframe

```{r}
hunan<-left_join(hunan,lag.res)
```

We can now plot both the GDPPC and Spatial lag sum GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

#### 5.8.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Now, we obtain the weights with *nb2listw()*.

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Lastly, we will create our lag variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We will not convert this variable list into a dataframe before appending it to the hunan data frame.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan<- left_join(hunan, lag_wm_qs.res)
```

We will then plot the maps using qtm()

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

#### 8.9.4 Spatial Window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights. As in the previous section, we will include the diagonal neighbors using the include.self() function of spdep

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to this neighbor structure

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

We can now compute our lag variable with lag.listw().

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable into a dataframe and append it to the hunan datframe using left_join().

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")

hunan <- left_join(hunan, w_sum_gdppc.res)
```

Lastly, we will once again plot the maps for comparison

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
