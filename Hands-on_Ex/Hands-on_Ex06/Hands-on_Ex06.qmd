---
title: "6 Global and Local measures of Spatial Association"
author: "Santhya Selvan"
date: "September 19, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 6.1 Overview

In this Hands-on, I will be exploring how to compute Global Measures of Spatial Autocorrelation (GMSA) using the **spdep** package.

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

First and foremost, I will download the necessary packages, mainly sf, tidyverse, spdep and tmap.

```{r}
pacman:: p_load(sf, spdep, tidyverse, tmap )
```

## 6.2 Study Area and Data

For this exercise, I will use 2 data sets:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

#### 6.2.1 Importing the data

First, I will use the *st_read()* function of the sf package to import the shapefiles into our R environment.

```{r}
hunan3 <- st_read(dsn="data/geospatial",
                  layer="Hunan")
```

I will also read the csv file into our environment using the *read_csv()* function.

```{r}
hunan2012_3<- read_csv("data/aspatial/Hunan_2012.csv")
```

Lastly, I will perform a relational join to join the attributes from the *hunan2012_3* dataframe to the *hunan3* dataframe. This is done by using the *left_join()* function of the **dplyr** package.

```{r}
hunan3 <- left_join(hunan3,hunan2012_3) %>% 
 select(1:4, 7, 15)
```

#### 6.2.2 Visualising Regional Development Indicators

In this section, we will plot a chloropeth map that will show us the distribution of GDPPC 2012. This will be done using the qtm() function of the **tmap** package.

```{r}
equal <- tm_shape(hunan3) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan3) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 6.3 Global Measures of Spatial Autocorrelation

#### 6.3.1 Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation, we would first need to derive the spatial weights of the study area. Spatial weights are the neighbourhood relationships between the spatial units.

We will derive the contiguity neighbours list using the *poly2nb()* function of the **spdep** package. By default, this function returns a matrice of neighbours of the spatial untis, derived by the Queen's method.

```{r}
wm_q3 <- poly2nb(hunan3, 
                queen=TRUE)
summary(wm_q3)
```

From the summary above, we see that there are a total of 88 spatial regions in hunan and the most connected region has 11 links. There are also 2 least connected regions with only one neighbour each.

#### 6.3.2 Row-standardized Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q3 <- nb2listw(wm_q3, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q3
```

## 6.4 Global Measures of Spatial Autocorrelation- Moran's Test

#### 6.4.1 Moran's I Test

In this section, we will be performing the Maron's I statistics test using the *moran.test()* function of the **spdep** package.

```{r}
moran.test(hunan3$GDPPC, 
           listw=rswm_q3, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

From the statistics derived above, we see that the p-value is extremely small and that the alternate hypothesis is greater, enabling us to reject the null hypothesis (which states that there is no correlation between the weighted spatial units) and conclude that there is significant spatial autocorrelation between the weighted spatial units. This is further corroborated by the positive value of the Moran I Statistic.

In context, this means that counties with similar GDPPC Values are more close to one another spatially as compared to counties that have varying levels.

#### 6.4.2 Computing Monte Carlo Moran's I Statistic

We will now perform the Monte Carlo Simulation for the Moran's I Statistic using the *moran.mc()* function, also from the **spdep** package.

```{r}
set.seed(1234)
bperm= moran.mc(hunan3$GDPPC, 
                listw=rswm_q3, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

From the statistics above, we once again see that the p-value is lower than 0.05, and we can reject the null hypothesis and accept the claim that the weighted spatial units are positively autocorrelated.

#### 6.4.3 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I",)
abline(v=0, 
       col="purple") 
```

## 6.5 Global Measures of Spatial Autocorrelation- Geary's C

#### 6.5.1 Geary's C Test

In this section, I will be performing the Geary's C test using the *geary.test()* function, also from the **spdep** package.

```{r}
geary.test(hunan3$GDPPC, listw=rswm_q3)
```

From the statistics above, I see that the Geary C statistic has a postivie value and the p-value is very small. This indicates that the null hypothesis (which states that the weighted spatial units are randomly distributed) is rejected and the weighted spatial units are concluded to be spatially correlated.

#### 6.5.2 Computing Monte Carlo Geary's C

We will perform the permutations of the Monte Carlo simulation using the *geary.mc()* function of the **spdep** package.

```{r}
set.seed(1234)
bperm=geary.mc(hunan3$GDPPC, 
               listw=rswm_q3, 
               nsim=999)
bperm
```

#### 6.5.3 Visualising the Monte Carlo Geary's C

We will once again plot a histogram to reveal the distribution of the values in the Monte Carlo simulation.

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

## 6.6 Spatial Correlogram

Spatial Correlograms are plots that show how correlated pairs of spatial observations are when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. In this section, we will be plotting the correlograms for the two tests that we have explored so far.

#### 6.6.1 Compute Moran I's Correlogram

To achieve this, we will be using the *sp.correlogram()* function of the **spdep** package.

```{r}
MI_corr <- sp.correlogram(wm_q3, 
                          hunan3$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

From the plot above, we see that as the distance increases, the distribution of the values of the Moran I's test becomes more negative, indicating that with larger distances, the spatial autocorrelation of the weighted spatial units decrease.

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

#### 6.6.2 Computing Geary C's Correlogram

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q3, 
                          hunan3$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similarly, we will derive the analysis report

```{r}
print(GC_corr)
```

## 6.7 Local Measures of Spatial Autocorrelation

#### 6.7.1 Computing Local Moran's I

To compute local Moran’s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran’s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan3$County)
localMI <- localmoran(hunan3$GDPPC, rswm_q3)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran’s I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

We can make use of the *printCoefmat()* to list the contents of the local Moran matrix.

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan3$County[fips]),
  check.names=FALSE)
```

#### 6.7.2 Mapping the Local Moran's I map

Before we map the Local Moran I map, we will first append the Moran I dataframe to the hunan dataframe.

```{r}
hunan.localMI <- cbind(hunan3,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

We will now plot the chloropeth map of local Moran I's values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### 6.7.3 Mapping Local Moran I's p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values. The code chunks below produce a choropleth map of Moran’s I p-values by using functions of **tmap** package.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Purples", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### 6.7.4 Mapping both Moran's I- and p- values

For more effective interpretation, we can plot both maps side-by-side.

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## 6.8 Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

#### 6.8.1 Plotting the Moran Scatter Plot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

We will use the *moran.plot()* function of the **spdep** package to plot the scatterplot.

```{r}
nci <- moran.plot(hunan3$GDPPC, rswm_q3,
                  labels=as.character(hunan3$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. 

#### 6.8.2 Plotting Moran Scatterplot with standardised variable

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations. as.vector() function at the end ensures that the output will be in a vector format.

```{r}
hunan3$Z.GDPPC <- scale(hunan3$GDPPC) %>% 
  as.vector 
```

We will now once again plot the scatterplot.

```{r}
nci2 <- moran.plot(hunan3$Z.GDPPC, rswm_q3,
                   labels=as.character(hunan3$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

#### 6.8.3 Preparing LISA map classes

Below are the steps to prepare a LISA cluster map

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, we derive the spatially lagged variable of interest (i.e. GDPPC) and center it around its mean.

```{r}
hunan3$lag_GDPPC <- lag.listw(rswm_q3, hunan3$GDPPC)
DV <- hunan3$lag_GDPPC - mean(hunan3$lag_GDPPC)     
```

This is followed by centering the local Moran’s around the mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05       
```

These four command lines below define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
quadrant[DV <0 & LM_I<0] <- 1
quadrant[DV <0 & LM_I>0] <- 2
quadrant[DV >0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      

```

Lastly, place non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

## 6.9 Plotting a LISA map

Now, we can plot a LISA map using the code chunk below.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

We can also plot the local Moran's value and it's corresponding p-values beside each other.

```{r}
gdppc <- qtm(hunan3, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

## 7.0 Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

#### 7.0.1 Getis and Ord's G statistic

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

#### 7.0.2 Deriving Distance-based Weights Matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

##### 7.0.2.1 Deriving the centroid

First, we will derive the centroid of each of the polygons found in the hunan3 dataframe so that we can construct a connectivity graph.

```{r}
longitude <- map_dbl(hunan3$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan3$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

##### 7.0.2.2 Determining the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

##### 7.0.2.3 Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, nb2listw() is used to convert the output to a spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

#### 7.0.3 Computing Adaptive Distance Weights Matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

We once again convert the output to a spatial weights object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## 7.1 Computing Gi statistics

#### 7.1.1 Gi Statistics using fixed distance

```{r}
fips <- order(hunan3$County)
gi.fixed <- localG(hunan3$GDPPC, wm62_lw)
gi.fixed
```

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan3, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

In fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

#### 7.1.2 Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan3, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

#### 7.1.3 Gi Statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan3$County)
gi.adaptive <- localG(hunan3$GDPPC, knn_lw)
hunan.gi <- cbind(hunan3, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

#### 7.1.4 Mapping Gi statistics with adaptive distance weights

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan3, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
