---
title: "HandsOn_EX02"
---

## 2.1 Overview

In thematic mapping, map symbols are used to visualize selected properties of geographical features that are not visible. These properties include population, temperature, rainfall, vegetation distribution and such.

Geographic visualisation, or Geovisualisation, helps us to render a place, phenomenon or a process by providing us with the necessary graphical tools.

Choropleth maps are thematic maps that use colour mapping (pun intended) to represent statistical data, and are very commonly used in Geospatial Analytics. In this exercise, I plotted choropleth maps by using an R package called **tmap** package.

## 2.2 Preparation

The main package used is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap**, four other R packages will be used.

They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package. As such, we do not need to install them separately. Instead, just installing the tidyverse package will be sufficient.

<br>

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

I used this code line above to load the needed packages into my Rstudio. Now we are ready to get started!

<br>

## 2.3 Importing the Data

### 2.3.1 The Data Sources

I will be using two data sets for the creation of my chloropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### 2.3.1 Importing data to R

I used the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz2`. Below is the code:

```{r}
mpsz2<- st_read(dsn = "data/geospatial2", layer = "MP14_SUBZONE_WEB_PL")
```

<br>By typing the name of the variable `mpsz2`, we will be able to view its contents, as seen below.

```{r}
mpsz2
```

<br>Next, I will use the **read_csv()** function from the **readr** package to import the *respopagsex2011to2020.csv* file into R and save it as a data fram called *popdata*.

This is Illustrated below.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### **2.3.2 Preparing the data**

Before creating the thematic maps, I first created a data table with year 2020 values. The data table included the following variables: PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

#### 2.3.2.1 Data wrangling

I used the *pivot_wider()* of **tidyr** package, and *mutate()*, *filter()*, *group_by()* and *select()* of the **dplyr** package.

```{r}
popdata2020 <- popdata %>%   filter(Time == 2020) %>%   group_by(PA, SZ, AG) %>%   summarise(`POP` = sum(`Pop`)) %>%   ungroup()%>%   pivot_wider(names_from=AG,                values_from=POP) %>%   mutate(YOUNG = rowSums(.[3:6])          +rowSums(.[14])) %>% mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ rowSums(.[15]))%>% mutate(`AGED`=rowSums(.[16:21])) %>% mutate(`TOTAL`=rowSums(.[3:21])) %>%   mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) /`ECONOMY ACTIVE`) %>%   select(`PA`, `SZ`, `YOUNG`,         `ECONOMY ACTIVE`, `AGED`,         `TOTAL`, `DEPENDENCY`) 
```

#### 2.3.2.2 Joining the geospatial and aspatial data

The values in PA and SZ fields need to be converted to uppercase. This is because the values of PA and SZ fields are made up of both upper- and lowercase values. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase. This will help standardise the values across the table.

```{r}
popdata2020 <- popdata2020 %>%   mutate_at(.vars = vars(PA, SZ),            .funs = list(toupper)) %>%   filter(`ECONOMY ACTIVE` > 0)
```

I then used *left_join()* of **dplyr** to join the geographical data and attribute table using planning subzone name as the common identifier.

```{r}
mpsz2_pop2020 <- left_join(mpsz2, popdata2020,                           by = c("SUBZONE_N" = "SZ"))
```

## 2.4 Choropleth Mapping using tmap

And finally to the \*highlight\* of the exercise: the actual mapping! Here, I covered two approaches to to preparing a thematic map using tmap. They are:

-   Plotting a thematic map using *qtm()*. This is the faster method.

-   Plotting highly customisable thematic map by using tmap elements.

Let's dive into these methods. <br>

### 2.4.1 Using qtm()

qtm() provides a good default visualisation.

```{r}
tmap_mode("plot") 
qtm(mpsz2_pop2020, fill = "DEPENDENCY")
```

<br>

### 2.4.2 Creating a choropleth map by using tmap’s elements

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. tmap's drawing elements can be used to draw a high quality cartographic choropleth map.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",            style = "quantile",            palette = "Blues",           title = "Dependency ratio") +   tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",             main.title.position = "center",             main.title.size = 1.2,             legend.height = 0.45,              legend.width = 0.35,             frame = TRUE) +   tm_borders(alpha = 0.5) +   tm_compass(type="8star", size = 2) +   tm_scale_bar() +   tm_grid(alpha =0.2) +   tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",               position = c("left", "bottom"))
```

<br>

### 2.4.3 Plotting a base map

*tm_shape()* is used to build the base map and this is followed up by one or more layering elements, which can be included with the use of functions like *tm_fill()* and *tm_polygons().*

```{r}
tm_shape(mpsz2_pop2020) + tm_polygons()
```

In this code line above, I used *tm_shape()* to firstly define the input data from `mpz_pop2020` and drew the planning subzone polygons with the use of *tm_polygons()*.

We can also take this one step further and plot a choropleth map that shows the geographical distribution of a variable of our choice by planning subzone. To do this, we set the variable in the *tm_polygons()* function to our desired variable. Here, I have set it to *Dependency*.

```{r}
tm_shape(mpsz2_pop2020) + tm_polygons("DEPENDENCY")
```

### **2.4.4 Breaking down tm_polygons()**

*tm_polygons()* is in fact a wrapper for two other functions:

-   **tm_fill()** which shades the polygons with the default colour scheme

-   **tm_border()** which adds the borders of the shapefile into our generated choropleth map.

This is how the map looks like with the use of just *tm_fill()*.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY")
```

<br>

And here's the map when we add in the borders with the use of *tm_borders()*. I have used 3 attributes here:

-   lwd-indicates a value for width of the borderline. Default value is 1

-   col - indicates the colour of the borderline.

-   alpha - indicates the transparency of the borderline. This is one a scale of 0-1, where 0 is completely transparent and 1 is full opacity.

```{r}
tm_shape(mpsz2_pop2020)+ tm_fill("DEPENDENCY") + tm_borders(lwd = 0.1,  alpha = 1, col= "#9ca5f9")
```

### 2.4.5 Data classification methods in tmap

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

#### 2.4.5.1 Plotting choropleth maps using the built-in classification methods

Here I used quantile style with 5 classes.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 5,           style = "quantile") +   tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 5,           style = "equal") +   tm_borders(alpha = 0.5)
```

This plot above is using the "equal" data classification. The plot below is using "fisher".

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 5,           palette= "PuRd",           style = "fisher") +   tm_borders(alpha = 0.5) 
```

This plot below uses "jenks".

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 5,           style = "jenks",           palette="PuBuGn") +   tm_borders(alpha = 0.5)
```

We can also have the same classification method but vary the number of classes. Here I have kept the method of jenks, but have changed the number of classes to 3.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 3,           palette="PuBuGn",           style = "jenks") +   tm_borders(alpha = 0.5)
```

#### 2.4.5.2 Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. However, we can set the breakpoints using *breaks* argument in *tm_fill()*. It is important to note that in **tmap**, the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

I will first get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.

```{r}
summary(mpsz2_pop2020$DEPENDENCY)
```

From the results above, good break points will be at 0.60, 0.70, 0.80, and 0.90. I will also need to include a minimum and maximum, which will be set at 0 and 1. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

I will use the code below to plot our map:

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +   tm_borders(alpha = 0.5)
```

### 2.4.6 Colours!

We can choose to set our own colourways for the maps, but tmap also has a set of predefined colourways under the **RColorBrewer** package.

We just need to define our preferred colour palette in the "palette" argument in *tm_fill()*.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 6,           style = "quantile",           palette = "Purples") +   tm_borders(alpha = 0.5)
```

Including the "-" symbol infront of the colour value will reverse the colours of the scale as shown below:

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",           n = 6,           style = "quantile",           palette = "-Purples") +   tm_borders(alpha = 0.5)
```

### 2.4.7 Map Layout

Map elements contain elements like the map title, legend, the scale bar and other such aspects that are important in the map that we are plotting.

#### 2.4.7.1 Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",            style = "jenks",            palette = "Blues",            legend.hist = TRUE,            legend.is.portrait = TRUE,           legend.hist.z = 0.1) +   tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",             main.title.position = "center",             main.title.size = 1,             legend.height = 0.45,              legend.width = 0.35,             legend.outside = TRUE,             legend.position = c("right", "bottom"),             frame = FALSE) +   tm_borders(alpha = 0.5)
```

#### 2.4.7.2 Map Style

We can change the style of the map layout with the *tmap_style()* function.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",            style = "quantile",            palette = "viridis") +   tm_borders(alpha = 0.5) +   tmap_style("cobalt")
```

2.4.5.3 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill("DEPENDENCY",            style = "quantile",            palette = "plasma",           title = "No. of persons") +   tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",             main.title.position = "center",             main.title.size = 1.2,             legend.height = 0.45,              legend.width = 0.35,             frame = TRUE) +   tm_borders(alpha = 0.5) +   tm_compass(type="8star", size = 2) +   tm_scale_bar(width = 0.15) +   tm_grid(lwd = 0.1, alpha = 0.2) +   tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",               position = c("left", "bottom"))
```

### **2.4.8 Drawing Small Multiple Choropleth Maps**

**Facet maps** are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in *tm_facets()*, and

-   by creating multiple stand-alone maps with *tmap_arrange()*.

#### 2.4.8.1 Assigning multiple values to atleast one of the aesthetic arguments

Here, I will plot facet maps by defining ***ncols*** in **tm_fill().**

```{r}
tm_shape(mpsz2_pop2020)+   tm_fill(c("YOUNG", "AGED"),           style = "equal",            palette = "Blues") +   tm_layout(legend.position = c("right", "bottom")) +   tm_borders(alpha = 0.5) +   tmap_style("white")
```

We can include more than one value for multiple aesthetic arguments.

```{r}
tm_shape(mpsz2_pop2020)+    tm_polygons(c("DEPENDENCY","AGED"),           style = c("equal", "quantile"),            palette = list("Blues","Greens")) +   tm_layout(legend.position = c("right", "bottom"))
```

#### 2.4.8.2 By defining a group-by variable in *tm_facets()*

Here, I used tm_facets():

```{r}
tm_shape(mpsz2_pop2020) +   tm_fill("DEPENDENCY",           style = "quantile",           palette = "Purples",           thres.poly = 0) +    tm_facets(by="REGION_N",              free.coords=TRUE,              drop.shapes=TRUE) +   tm_layout(legend.show = FALSE,             title.position = c("center", "center"),              title.size = 20) +   tm_borders(alpha = 0.5)
```

#### 2.4.8.3 By using tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz2_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Greens")

agedmap <- tm_shape(mpsz2_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Purples")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### 2.4.9 Mapping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz2_pop2020[mpsz2_pop2020$REGION_N=="CENTRAL REGION", ])+   tm_fill("DEPENDENCY",            style = "quantile",            palette = "Greens",            legend.hist = TRUE,            legend.is.portrait = TRUE,           legend.hist.z = 0.1) +   tm_layout(legend.outside = TRUE,             legend.height = 0.45,              legend.width = 5.0,             legend.position = c("right", "bottom"),             frame = FALSE) +   tm_borders(alpha = 0.5)
```
