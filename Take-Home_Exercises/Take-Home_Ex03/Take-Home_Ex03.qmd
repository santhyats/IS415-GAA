---
title: "Prototyping Modules for Shiny App for the Geospatial Analytics Project"
author: "Santhya Selvan"
date: "23 October 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 10.0 Overview

.....

## 10.1 Getting Started

#### 10.1.1 Loading in the packages

For our project, I will be needing a variety of packages, namely:

**sf**: Used in spatial data wrangling

**tidyverse**: Used in data wrangling for non-spatial data

**tmap**: For functions relating to mapping point patterns

**sfdep:** Functions that support Exploratory Data Analysis and is compatible with the sf and tidyverse packages

**corrplot:** package to help plot correlation matrices.

**cluster, NbClust**: packges that will be helpful for our hierarchical clustering needs.

**ggpubr, GGally:** packages extended on/ based on **ggplot2**. They provide functions for plots.

```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally)
```

#### 10.1.2 Loading in the datasets

For our project, we will be using three datasets:

-   *crime_district.csv* is a csv file containing data on crimes in Malaysia at the district level

-   population_district.csv is a csv file containing data of the population of Malaysia, also at the district level

-   Malaysia Admin 2 Boundary in shapefile format.

I will be loading them into the R environment using *read_csv()* function of the **readr** package for the aspatial data and the *st_read()* function of the **sf** package for the geospatial data.

```{r}

crime_district <- read_csv("data/aspatial/crime_district.csv")
population_district <- read_csv("data/aspatial/population_district.csv")
msia_adm2_sf <- st_read(dsn = 'data/geosp', layer = 'mys_admbnda_adm2_unhcr_20210211')
```

#### 10.1.3 Data Wrangling

The crime dataset has rows that have crime data aggregated across all the districts, and across all the crime types. It also contains rows where the data is aggregated over just the crime types. All of these rows are grouped by their dates.

Hence, firstly, I will be formatting the crime data to only include the state names and their respective districts, and remove all the rows that contain aggregated values. Since population data is from 2020-2024, I will only keep the data for the years 2020-2023. All of this will be done using the *filter()* function.

```{r}
crime_district <- crime_district %>% 
    filter(state != "Malaysia") %>% 
    filter(category == "assault") %>% 
    filter(district != "All") %>% 
    filter(type != "all") %>% 
   filter(year(ymd(date)) >= 2020 & year(ymd(date)) <= 2023)
```

Next, I will format the population data. I will filter the dates to exclude 2024 since we do not have crime data for that year, and once again remove all the rows where data is aggregated over a certain characteristic.

```{r}

library(dplyr)
library(lubridate)

# population_state_filtered <- 
pop_data <- population_district %>%
    filter(!year(ymd(date)) == 2024) %>% 
    filter(sex == 'both' | sex == 'overall' ) %>% 
    filter(age == 'overall') %>% 
    filter(ethnicity == 'overall') %>% 
    select(-c(4:6))
```

As for the boundary sf, I will drop all the columns that are not needed.

```{r}
adm2_sf <- msia_adm2_sf %>% select(-c(3:5, 8,9,11,12))
```

Next, I used the unique() function on the district columns of all the sf dataframes to see the discrepancies in the district names and district data.

```{r}
unique(pop_data$district)

```

```{r}


unique(adm2_sf$ADM2_EN)

```

```{r}
unique(crime_district$district)

```

As expected, all the dataframes contained different numbers of districts. There were also other issues such as differing spelling/naming conventions, splitting of districts into north/south regions, and districts missing from the boundary sf that were present in the aspatial datasets.

As little can be done in salvaging districts that were not present in the boundary layer, I decided to handle the other forms of discrepancies.

First, I will convert all the district names to lowercase letters to eliminate any errors on that front, and to standardise the naming conventions.

```{r}
crime_district$district <- tolower(trimws(crime_district$district))
adm2_sf$ADM2_EN <- tolower(trimws(adm2_sf$ADM2_EN))
pop_data$district <- tolower(trimws(pop_data$district))

```

Since our main focus was crime data and it was the dataframe that will be mutually connected to both the boundary layer and the population data (phrase better), we will use the districts in the crime dataframe as a guide to formatting the other tables.

We first started off by handling the very obvious differences that could be observed through visual inspection as well as through the use of the unique function. We noticed that 2 districts, Johor Bahru and Klang, were split up in the crime dataframe. Hence, we merged these rows and summed up their crime number values.

str_detect() function of the stringr package was used to identify rows that contained the given input string. In our case, it was the district name. mutate() was then used to change the values of these rows. Since this produces a new dataframe, another dataframe was created with the rest of the values, before all three were bound together.

```{r}
library(stringr)
crime_johor<- crime_district %>%
  filter(str_detect(district,"johor bahru")) %>%
  mutate(district = 'johor bahru') %>%
  group_by(state, district,type, date) %>%
  summarise(crimes = sum(crimes))

crime_klang<- crime_district %>%
  filter(str_detect(district,"klang")) %>%
  mutate(district = 'klang') %>%
  group_by(state, district,type, date) %>%
  summarise(crimes = sum(crimes))


other_rows <- crime_district %>% 
  filter(!str_detect(district, "johor bahru"))

crime_district <- bind_rows(crime_johor, crime_klang, other_rows) %>% 
  select(-c(6)) %>% 
  mutate(category = 'assault') 
```

Upon further examination, there were more discrepancies that I found so I sought to change them.

```{r}
crime_district<- crime_district%>% 
  mutate(district = ifelse(district == "cameron highland", "cameron highlands", district)) %>% 
  mutate(district = ifelse(district == "kuala lipis", "lipis", district)) %>% 
  mutate(district = ifelse(district == "kota kinabatangan", "kinabatangan", district)) %>% 
  mutate(district = ifelse(district == "seberang perai tengah", "s.p. tengah", district)) %>% 
  mutate(district = ifelse(district == "seberang perai utara", "s.p. utara", district)) %>% 
  mutate(district = ifelse(district == "seberang perai selatan", "s.p.selatan", district)) %>% 
  mutate(district = ifelse(district == "petaling jaya", "petaling", district)) %>% 
   mutate(district = ifelse(district == "matu daro", "matu", district)) %>% 
  mutate(state = ifelse(district == "w.p. labuan", "Sabah", state))
   
  
  

pop_data <- pop_data %>% 
  mutate(district = ifelse(district == "kulai", "kulaijaya", district)) %>% 
  mutate(district = ifelse(district == "sp tengah", "s.p. tengah", district)) %>% 
  mutate(district = ifelse(district == "sp utara", "s.p. utara", district)) %>% 
  mutate(district = ifelse(district == "sp selatan", "s.p.selatan", district)) 
   
  
```

```{r}
pop_crime<- left_join(pop_data, crime_district, by= "district")
pop_crime_na<- pop_crime[rowSums(is.na(pop_crime)) > 0,]

drop_list_pop <- pop_crime_na$district
pop_data <- pop_data %>%
  filter(!(district %in% drop_list_pop))

pop_crime2<-left_join(crime_district, pop_data, by="district")
pop_crime_na2 <-pop_crime2[rowSums(is.na(pop_crime2)) > 0,]

drop_list_pop <- pop_crime_na2$district
crime_district <- crime_district %>%
  filter(!(district %in% drop_list_pop))
```

Next, I will left join the boundary and the population dataframes to the crime dataframe and vice versa, and remove all the rows that do not match.

```{r}

adm_crime <- left_join(adm2_sf, crime_district, by= c("ADM2_EN" = "district"))
adm_crime_na <- adm_crime[rowSums(is.na(adm_crime)) > 0,]

drop_list <- adm_crime_na$ADM2_EN
adm2_sf <- adm2_sf %>% 
  filter(!(ADM2_EN %in% drop_list))

adm_crime2 <- left_join(crime_district, adm2_sf, by= c("district" = "ADM2_EN"))
adm_crime_na2 <- adm_crime2[rowSums(is.na(adm_crime2)) > 0,]

drop_list <- adm_crime_na2$ADM2_EN
crime_district <- crime_district %>% 
  filter(!(district %in% drop_list))
  
```

Finally, we then calculated a ratio that is representative of the crime rate in each district by dividing the number of crimes in each district by the population figures for that district and multiplying this by 1000. We then added a new column to indicate if the district belonged to the West or Peninsular region of Malaysia. Since the West and Peninsular regions are not connected by admin borders, we would have to process these regions separately for our analysis.

```{r}

  
rate_crime_district <- crime_district %>% 
    left_join(pop_data, by = c("district", "state", "date")) %>% 
    mutate(crime_rate = (crimes / population) * 1000)

# assigning Penisular , East region
rate_crime_district <- rate_crime_district %>% 
    mutate(region = case_when(
        state %in% c("Sabah", "Sarawak") ~ "East",
        TRUE ~ "Peninsular"
  ))
```

```{r}
write_rds(pop_data, "data/rds/pop_data.rds")
write_rds(crime_district, "data/rds/crime_district.rds")
write_rds(adm2_sf, "data/rds/adm2_sf.rds")
write_rds(rate_crime_district, "data/rds/rate_crime_district.rds")
```

```{r}
pop_data<- read_rds("data/rds/pop_data.rds")
crime_district <- read_rds("data/rds/crime_district.rds")
adm2_sf <- read_rds("data/rds/adm2_sf.rds")
rate_crime_district<-read_rds("data/rds/rate_crime_district.rds")
```
