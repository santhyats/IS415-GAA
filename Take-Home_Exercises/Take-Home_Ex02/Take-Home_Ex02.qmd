---
title: "Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "Santhya Selvan"
date: "23 September 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 2.0 Overview

....

## 2.1 Getting Started

#### 2.1.1 Loading the necessary packages

First and foremost, I will load the packages that we will be using in this exercise using the *p_load()* function of **pacman.** The packages we will use in this exercise are the following:

**sf**: Used in spatial data wrangling

**tidyverse**: Used in data wrangling for non-spatial data

**tmap**: For functions relating to mapping point patterns

**sfdep:** Functions that support Exploratory Data Analysis and is compatible with the sf and tidyverse packages

```{r}
pacman::p_load(sf, tidyverse, tmap, sfdep)
```

#### 2.1.2 Loading in the Datasets

These are the datafiles I will be using for this exercise:

-   Thai_Drug_Offences_2017-2022.csv is a csv file containing the data about the locations of drug offences in Thailand.

-   Thai_Admin1_2022 is a shapefile that contains the provincial boundaries of Thailand.

I will first load in the csv file using the *read_csv()* function, and save it into the `Thai_doff` dataframe. After looking at the downloaded data, I will be able to select only the columns that are needed for this exercise.

I will further group rows according to the province and total up the number of cases for each province. This is done with the help of the *group_by()* function to group the rows according to the province, and then using the *summarise()* and *sum()* functions to sum up the number of cases in each province and save it in a new column called 'total_count'.

```{r}
Thai_doff <- read_csv("data/aspatial/Thai_Drug_Offences_2017-2022.csv") %>%
  select(1, 2, 3, 5)

Thai_doff <- Thai_doff %>% 
  group_by(fiscal_year, province_en) %>% 
  summarise('total_count'= sum(`no_cases`))

```

Next, I will load in the shapefile and save it to `Thai_bounds` using the *st_read()* function. After observing the dataframe, I will also drop the columns that are not needed for our analysis.

```{r}
Thai_bounds <- st_read(dsn = "data/geospatial",
                       layer = "Thai_Admin1_2022") %>%
  select(1:3, 17)
```

Finally, I will perform a left join of the *Thai_bounds* dataframe to the `Thai_doff` dataframe using the province names. This will be done using the *left_join()* function.

```{r}
Thai_doff<- left_join(Thai_doff, Thai_bounds, by= c("province_en" = "ADM1_EN")) %>% 
  drop_na()
```

#### 2.1.3 Visualising the Data Over the Years

I will now plot the layers on a chloropleth map to observe the distribution of the drug offences in Thailand. The following functions are used to achieve this:

-   *tm_shape()* to plot the provincial boundaries,

-   *tm_fill()* to map out the the variable of interest- the number of drug abuse cases

-   *tm_borders(), tm_layout()* to format the look of the maps.

```{r}
#| eval: false
tm_shape(Thai_doff) +
  tm_fill("no_cases",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification") + 
  tm_facets(by = "fiscal_year")

```

Having encountered this error, I checked the type of object and found that it is a list! \<insert why it might be so\>.

```{r}
typeof(Thai_doff)
```

As such, I will convert the object to a sf dataframe before continuing. To do this, I will use the *data.frame()* function.

```{r}
Thai_doff <- Thai_doff %>% st_as_sf()
```

```{r}
tm_shape(Thai_doff) +
  tm_fill("total_count",
          n = 5,
          style = "quantile",
          palette = "Purples") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification") +
  tm_facets(by = 'fiscal_year')

```

Before we can proceed, I will create new data frames by segmenting our `Thai_doff` by years. This will help us in our analysis the spatial autocorrelation over time later on.

```{r}

years <- list(17, 18, 19, 20, 21, 22)

for (i in years) {
  
  vars <- paste('Thai_doff_', i, sep = '') 
  assign(vars, 
         Thai_doff %>% 
           filter(fiscal_year == paste('20', i, sep = '')))
         
}

```

## 2.2 Computing Weights of the Study Area

The first step in our analysis will be to come up with the spatial weights for our study area. Since our study area is constant over the time period and there was no change in the provincial boundaries of Thailand during the years 2017-2022, we can compute the spatial weights just once at the start of our analysis and use it for our yearly calculations.

#### 2.2.1 Computing the Contiguity Spatial Weights

I will use the *st_contiguity()* method from the **sfdep** package to derive the spatial neighbours of the spatial units and *st_weights()* is used to compute their respective weights and save it as a new variable.

```{r}
#| eval: false
  Thai_doff_wm<- Thai_doff_17 %>% 
  mutate(nb = st_contiguity(geometry),
         wt= st_weights(nb, 
                        style='W'),
         .before=1)
```

When I tried this, I encountered an error indicating the presence of units with no neighbours. Hence, I computed the neighbours list of the spatial units by themselves to identify the exact units causing the errors.

```{r}
Thai_doff_wm<- st_contiguity(Thai_doff_17$geometry)

Thai_doff_wm
```

From the results above, we see that region 46 is the spatial unit with no neighbours, and that there are 2 disjoint clusters of spatial units-likely due to this unlinked region. Referring to the corresponding province name of the 46th spatial region in the geometry column of the Thai_doff_17 dataframe:

```{r}
Thai_doff_17$province_en[46]
```

We see that the region is Phuket. This corroborates with the fact that Phuket is an island off of the coast of mainland Thailand, thus falling out of the connected administrative boundaries. Since I do want to keep Phuket in the analysis, I will handle this issue by manually setting the neighbour of Phuket. I will set it to be region 37, Phang Nga, since it is geographically closest to Phuket. I will include an extra codeline to capture this, while keeping the rest of the code from earlier.

```{r}
Thai_doff_wm <- Thai_doff_17 %>% 
  mutate(nb = st_contiguity(geometry), .before=1)

Thai_doff_wm$nb[[46]] <- as.integer(37)

Thai_doff_wm <- Thai_doff_wm %>%
  mutate(wt = st_weights(nb, style = 'W'), 
         .before = 1) %>% 
  select(1,2)
```

## 2.3 Global Measures of Spatial Autocorrelation

#### 2.2.3 Performing the Moran I's Test by Year

For this section, I will be conducting the Moran I's Test and the Moran I's Permutations test for the dataset according to each year.

::: panel-tabset
## 2017

::: panel-tabset
## Global Moran's I Test

```{r}
 
global_moran_test(Thai_doff_17$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)
```

## Moran I's Permutation Test

```{r}
set.seed(1234)
global_moran_perm(Thai_doff_17$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)
```

From the
:::

## 2018

::: panel-tabset
## Global Moran I's Test

```{r}
global_moran_test(Thai_doff_18$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)
```

## Moran I's Permutation Test

```{r}

set.seed(1235)
global_moran_perm(Thai_doff_18$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)
```
:::

## 2019

::: panel-tabset
## Global Moran I's Test

```{r}
global_moran_test(Thai_doff_19$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)

```

## Moran I's Permutation Test

```{r}
set.seed(1236)
global_moran_perm(Thai_doff_19$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)
```
:::

## 2020

::: panel-tabset
## Global Moran I's Test

```{r}
global_moran_test(Thai_doff_20$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)
```

## Moran I's Permutation's Test

```{r}
set.seed(1237)
global_moran_perm(Thai_doff_20$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)

```
:::

## 2021

::: panel-tabset
## Global Moran I's Test

```{r}
global_moran_test(Thai_doff_21$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)

```

## Moran I's Permutations Test

```{r}
set.seed(1238)
global_moran_perm(Thai_doff_21$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)

```
:::

## 2022

::: panel-tabset
## Global Moran I's Test

```{r}
global_moran_test(Thai_doff_22$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt)

```

## Moran I's Permutations Test

```{r}
set.seed(1238)
global_moran_perm(Thai_doff_20$total_count,
                  Thai_doff_wm$nb,
                  Thai_doff_wm$wt,
                  nsim=99)

```
:::
:::

#### 2.2.4 Computing Geary C's statistics by Year

## 2.4 Local Measures of Spatial Autocorrelation
