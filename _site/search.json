[
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "",
    "text": "Myanmar has been going through civil wars and internal conflicts for decades now. These conflicts have mainly been due to ethnic tensions and general unhappiness in the governing party. Conflicts range from battles, riots, violence against civilians, strategic developments and more. In this exercise, I will be analysing the distribution of conflicts in Myanmar.\nTo do this, I will mainly be performing quarterly KDE analysis on 4 main types of conflicts: Battles, Explosions, Violence against Civillians and Strategic Developments through the years of 2021-2024. I will also be performing the second order spatial point pattern process as well as the spatio temporal point process analysis for these segments. Let’s get started.\n\n\nThese are the packages that I will be using in this exercise.\nsf: Used in spatial data wrangling\ntidyverse: Used in data wrangling for non-spatial data\nraster: For reading, writing and manipulating raster data\ntmap: For functions relating to mapping point patterns\nspatstat: Provides functions for spatial point process analysis\nsparr: Provides functions for spatio-temporal point process analysis\n\npacman::p_load(sf, raster, tidyverse, spatstat, sparr, tmap)"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#overview",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#overview",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "",
    "text": "Myanmar has been going through civil wars and internal conflicts for decades now. These conflicts have mainly been due to ethnic tensions and general unhappiness in the governing party. Conflicts range from battles, riots, violence against civilians, strategic developments and more. In this exercise, I will be analysing the distribution of conflicts in Myanmar.\nTo do this, I will mainly be performing quarterly KDE analysis on 4 main types of conflicts: Battles, Explosions, Violence against Civillians and Strategic Developments through the years of 2021-2024. I will also be performing the second order spatial point pattern process as well as the spatio temporal point process analysis for these segments. Let’s get started.\n\n\nThese are the packages that I will be using in this exercise.\nsf: Used in spatial data wrangling\ntidyverse: Used in data wrangling for non-spatial data\nraster: For reading, writing and manipulating raster data\ntmap: For functions relating to mapping point patterns\nspatstat: Provides functions for spatial point process analysis\nsparr: Provides functions for spatio-temporal point process analysis\n\npacman::p_load(sf, raster, tidyverse, spatstat, sparr, tmap)"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "1.2 Data Preparation",
    "text": "1.2 Data Preparation\nIn this section, I will be retrieving the required data and performing the necessary data wrangling methods in order to transform the data into a form that is best suitable for our analytic needs for this exercise. The datasets used in this exercise are:\n\nMyanmar_All_2021-24.csv: A csv file downloaded from ACLED, which contains all the details of the internal conflicts in Myanmar from 2021-2024. Note that the file name has been renamed for ease of use.\nMBoundary: A shapefile downloaded from Myanmar Information Management Unit, MIMU. This shapefile maps out the boundary of Myanmar. I have also renamed this file for ease of use.\n\n\n1.2.1 Importing the Data\nFirstly, I will be importing the base map of Myanmar in shapefile format using st_read() function of the sf package. I will also transform the crs to that of Myanmar using the st_transform() function.\n\nboundary &lt;- st_read(dsn=\"data/raw\",\n                    layer = \"MBoundary\") %&gt;% \n  st_transform(crs=32646)\n\nReading layer `MBoundary' from data source \n  `C:\\santhyats\\IS415-GAA\\Take-Home_Exercises\\Take-Home_Ex01\\data\\raw' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nWe will make use of st_crs() function to make sure that the Coordinate Reference System has been correctly transformed to that of Myanmar.\n\nst_crs(boundary)\n\nCoordinate Reference System:\n  User input: EPSG:32646 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 46N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 46N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",93,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 90°E and 96°E, northern hemisphere between equator and 84°N, onshore and offshore. Bangladesh. Bhutan. China. Indonesia. Mongolia. Myanmar (Burma). Russian Federation.\"],\n        BBOX[0,90,84,96]],\n    ID[\"EPSG\",32646]]\n\n\nNext, I will also be Importing the regional boundaries of Myanmar and transforming the crs to that of Myanmar’s again.\n\nregions_sf &lt;- st_read(dsn=\"data/raw\",\n                      layer=\"regions\") %&gt;% \n  st_transform(crs = 32646)\n\nReading layer `regions' from data source \n  `C:\\santhyats\\IS415-GAA\\Take-Home_Exercises\\Take-Home_Ex01\\data\\raw' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nLastly, I will be importing and reading the csv file containing the data about the conflicts into a dataframe called all_sf. This is done using the read_csv() function of the readr package. I will once again ensure that the crs of the data is transformed to that of Myanmar’s.\n\nall_sf &lt;- read_csv('data/raw/Myanmar_All_2021-24.csv') %&gt;% \n  st_as_sf(coords = c('longitude', 'latitude'),\n           crs=4326) %&gt;% \n  st_transform(crs=32646) %&gt;% \n   select(1:4, 6,19, 29, 30) \n\nRows: 51553 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nst_crs(all_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32646 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 46N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 46N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",93,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 90°E and 96°E, northern hemisphere between equator and 84°N, onshore and offshore. Bangladesh. Bhutan. China. Indonesia. Mongolia. Myanmar (Burma). Russian Federation.\"],\n        BBOX[0,90,84,96]],\n    ID[\"EPSG\",32646]]\n\n\n\n\n1.2.2 Preparing the Data\nBefore we can start deriving our KDE layers, we will make sure our data is in a suitable form and is processed in a way that we need it in. I will start off by converting the date column in the aspatial data to the date format so that can be handled during computations. This is done through the as.Date() functon. I will also add in new columns called “quarters” and “num_quarters” to keep track of our quarters and its numbers. The numeric quarters column will come in handy when we are computing our Spatio Temporal KDE layers later.\n\nall_sf&lt;- all_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\"))\nall_sf$quarters &lt;- paste(quarters(all_sf$event_date), year(all_sf$event_date), sep=\"_\")\nall_sf$num_quarters&lt;-quarter(all_sf$event_date)\n\nBefore we can filter out the data that we need, I will be visualising the data according to the event types to observe for any patterns or similarity. To do this, I will first use tm_shape() and tm_polygons() of the tmap package to plot the base map of Myanmar, indicating all the regions. Next, I will use tm_shape() and tm_dots() together to plot out all the spatial points. Lastly, I will use tm_facets() to separate the plots according to the type of conlfict.\n\ntm_shape(boundary) + tm_polygons() + tm_shape(regions_sf) + tm_polygons() + tm_shape(all_sf) + tm_dots() + tm_facets(by='event_type', free.coords = FALSE, drop.units= TRUE)\n\n\n\n\n\n\n\n\nFrom the patterns observed above, I see that Battles, Strategic Developments, Explosions and Violence against civilians all have similar distribution of conflicts across the space. I also noted that Riots and Protests have very sparsespatial points even over the aggregated 4 year dataset. This indicates the possibility that there will be few to no spatial points available to analyse for certain quarters.\nAs such, I will be focusing my analysis on these four main categories of conflicts: Battles, Strategic Developments, Violence against Civilians and Explosions.\nI will filter out the data according to these event types using the filter() function and save them in separate sf objects.\n\nbattles_sf &lt;- all_sf %&gt;%  filter(event_type == 'Battles')\nbattles_sf\n\nSimple feature collection with 12049 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 416859.3 ymin: 1108594 xmax: 1223493 ymax: 3033183\nProjected CRS: WGS 84 / UTM zone 46N\n# A tibble: 12,049 × 10\n   event_id_cnty event_date  year time_precision event_type admin1     timestamp\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;\n 1 MMR64313      2024-06-30  2024              1 Battles    Mandalay      1.72e9\n 2 MMR64320      2024-06-30  2024              1 Battles    Mandalay      1.72e9\n 3 MMR64321      2024-06-30  2024              1 Battles    Mandalay      1.72e9\n 4 MMR64323      2024-06-30  2024              1 Battles    Sagaing       1.72e9\n 5 MMR64325      2024-06-30  2024              1 Battles    Shan-North    1.72e9\n 6 MMR64326      2024-06-30  2024              1 Battles    Shan-North    1.72e9\n 7 MMR64328      2024-06-30  2024              1 Battles    Shan-North    1.72e9\n 8 MMR64330      2024-06-30  2024              1 Battles    Shan-North    1.72e9\n 9 MMR64331      2024-06-30  2024              1 Battles    Shan-North    1.72e9\n10 MMR64332      2024-06-30  2024              1 Battles    Shan-South    1.72e9\n# ℹ 12,039 more rows\n# ℹ 3 more variables: geometry &lt;POINT [m]&gt;, quarters &lt;chr&gt;, num_quarters &lt;int&gt;\n\nexp_sf &lt;- all_sf %&gt;%  filter(event_type == \"Explosions/Remote violence\")\n\ncivViolence_sf &lt;- all_sf %&gt;%  filter(event_type == \"Violence against civilians\")\n\nstrat_dev_sf &lt;- all_sf %&gt;%  filter(event_type == 'Strategic developments')\n\nI will also be creating a separate sf containing the only the timeframe and the geometry of the spatial points, to be used in our Spatio Temporal KDE layers later. This is done by using the select() functions to select only the “quarters”, “num_quarters” an d”geometry” columns from the dataframes of the respective conflict types.\n\nquart_geo_bat&lt;- battles_sf %&gt;% \n  select(3,8,10)\n\nquart_geo_civ &lt;- civViolence_sf %&gt;% \n  select(3,8,10)\n\nquart_geo_exp&lt;- exp_sf %&gt;% \n  select(3,8,10)\n\nquart_geo_strat&lt;- strat_dev_sf %&gt;% \n  select(3,8,10) \n\nFinally, I will further split the conflict type datasets into quarterly periods. For ease of use, I will write these sf objects into rds files and save them in a compiled folder.\n\nBattlesExplosionsViolence against civilliansStrategic Developments\n\n\n\nq1_21_battles_sf &lt;- battles_sf %&gt;% \n  filter(year == '2021' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Battles/2021/q1.rds\")\n\nq2_21_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Battles/2021/q2.rds\")\n\nq3_21_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Battles/2021/q3.rds\")\n\nq4_21_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Battles/2021/q4.rds\")\n\n#2022\n\nq1_22_battles_sf &lt;- battles_sf %&gt;% \n  filter(year == '2022' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Battles/2022/q1.rds\")\n\nq2_22_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Battles/2022/q2.rds\")\n\nq3_22_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Battles/2022/q3.rds\")\n\nq4_22_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Battles/2022/q4.rds\")\n\n#2023\n\nq1_23_battles_sf &lt;- battles_sf %&gt;% \n  filter(year == '2023' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Battles/2023/q1.rds\")\n\nq2_23_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Battles/2023/q2.rds\")\n\nq3_23_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Battles/2023/q3.rds\")\n\nq4_23_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Battles/2023/q4.rds\")\n\n#2024\n\nq1_24_battles_sf &lt;- battles_sf %&gt;% \n  filter(year == '2024' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Battles/2024/q1.rds\")\n\nq2_24_battles_sf &lt;-battles_sf %&gt;% \n  filter(year == '2024') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Battles/2024/q2.rds\")\n\n\n\n\nq1_21_exp_sf &lt;- exp_sf %&gt;% \n  filter(year == '2021' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Explosions/2021/q1.rds\")\n\nq2_21_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Explosions/2021/q2.rds\")\n\nq3_21_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Explosions/2021/q3.rds\")\n\nq4_21_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Explosions/2021/q4.rds\")\n\n#2022\n\nq1_22_exp_sf &lt;- exp_sf %&gt;% \n  filter(year == '2022' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Explosions/2022/q1.rds\")\n\nq2_22_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Explosions/2022/q2.rds\")\n\nq3_22_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Explosions/2022/q3.rds\")\n\nq4_22_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Explosions/2022/q4.rds\")\n\n#2023\n\nq1_23_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2023' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Explosions/2023/q1.rds\")\n\nq2_23_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Explosions/2023/q2.rds\")\n\nq3_23_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Explosions/2023/q3.rds\")\n\nq4_23_exp_sf &lt;-battles_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Explosions/2023/q4.rds\")\n\n#2024\n\nq1_24_exp_sf &lt;- exp_sf %&gt;% \n  filter(year == '2024' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Explosions/2024/q1.rds\")\n\nq2_24_exp_sf &lt;-exp_sf %&gt;% \n  filter(year == '2024') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Explosions/2024/q2.rds\")\n\n\n\n\nq1_21_civViolence_sf &lt;- civViolence_sf %&gt;% \n  filter(year == '2021' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Violence/2021/q1.rds\")\n\nq2_21_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Violence/2021/q2.rds\")\n\nq3_21_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Violence/2021/q3.rds\")\n\nq4_21_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Violence/2021/q4.rds\")\n\n#2022\n\nq1_22_civViolence_sf &lt;- civViolence_sf %&gt;% \n  filter(year == '2022' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Violence/2022/q1.rds\")\n\nq2_22_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Violence/2022/q2.rds\")\n\nq3_22_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Violence/2022/q3.rds\")\n\nq4_22_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Violence/2022/q4.rds\")\n\n#2023\n\nq1_23_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2023' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Violence/2023/q1.rds\")\n\nq2_23_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Violence/2023/q2.rds\")\n\nq3_23_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Violence/2023/q3.rds\")\n\nq4_23_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Violence/2023/q4.rds\")\n\n#2024\n\nq1_24_civViolence_sf &lt;- civViolence_sf %&gt;% \n  filter(year == '2024' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Violence/2024/q1.rds\")\n\nq2_24_civViolence_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2024') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Violence/2024/q2.rds\")\n\n\n\n\nq1_21_strat_dev_sf &lt;- strat_dev_sf %&gt;% \n  filter(year == '2021' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2021/q1.rds\")\n\nq2_21_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2021/q2.rds\")\n\nq3_21_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2021/q3.rds\")\n\nq4_21_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2021') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2021/q4.rds\")\n\n#2022\n\nq1_22_strat_dev_sf &lt;- strat_dev_sf %&gt;% \n  filter(year == '2022' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2022/q1.rds\")\n\nq2_22_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2022/q2.rds\")\n\nq3_22_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2022/q3.rds\")\n\nq4_22_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2022') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2022/q4.rds\")\n\n#2023\n\nq1_23_strat_dev_sf &lt;-civViolence_sf %&gt;% \n  filter(year == '2023' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2023/q1.rds\")\n\nq2_23_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2023/q2.rds\")\n\nq3_23_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 3)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2023/q3.rds\")\n\nq4_23_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2023') %&gt;% \n  filter(quarter(event_date) == 4)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2023/q4.rds\")\n\n#2024\n\nq1_24_strat_dev_sf &lt;- strat_dev_sf %&gt;% \n  filter(year == '2024' ) %&gt;% \n  filter(quarter(event_date) == 1) %&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2024/q1.rds\")\n\nq2_24_strat_dev_sf &lt;-strat_dev_sf %&gt;% \n  filter(year == '2024') %&gt;% \n  filter(quarter(event_date) == 2)%&gt;%  \n  write_rds(\"data/rds/Strat_Dev/2024/q2.rds\")\n\n\n\n\n\n\n2.2 Data Wrangling\n\n2.2.1 Converting the sf objects to ppp objects\nTo derive our KDE layers, we would firstly need the sf objects to be converted to ppp objects. This is because the function that we will be using, density() of the spatstat package, only takes in objects in the ppp form. We will do this using the as.ppp() function.\n\nBattlesExplosionsStrategic DevelopmentsViolence Against Civilians\n\n\n\nbattlesQ121_ppp &lt;- as.ppp(st_coordinates(q1_21_battles_sf), st_bbox(q1_21_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ221_ppp &lt;- as.ppp(st_coordinates(q2_21_battles_sf), st_bbox(q2_21_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ321_ppp&lt;- as.ppp(st_coordinates(q3_21_battles_sf), st_bbox(q3_21_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ421_ppp&lt;-as.ppp(st_coordinates(q4_21_battles_sf), st_bbox(q4_21_battles_sf))\n\nWarning: data contain duplicated points\n\n#2022\n\nbattlesQ122_ppp &lt;- as.ppp(st_coordinates(q1_22_battles_sf), st_bbox(q1_22_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ222_ppp &lt;- as.ppp(st_coordinates(q2_22_battles_sf), st_bbox(q2_22_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ322_ppp&lt;- as.ppp(st_coordinates(q3_22_battles_sf), st_bbox(q3_22_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ422_ppp&lt;-as.ppp(st_coordinates(q4_22_battles_sf), st_bbox(q4_22_battles_sf))\n\nWarning: data contain duplicated points\n\n#2023\nbattlesQ123_ppp &lt;- as.ppp(st_coordinates(q1_23_battles_sf), st_bbox(q1_23_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ223_ppp &lt;- as.ppp(st_coordinates(q2_23_battles_sf), st_bbox(q2_23_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ323_ppp&lt;- as.ppp(st_coordinates(q3_23_battles_sf), st_bbox(q3_23_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ423_ppp&lt;-as.ppp(st_coordinates(q4_23_battles_sf), st_bbox(q4_23_battles_sf))\n\nWarning: data contain duplicated points\n\n#2024\nbattlesQ124_ppp &lt;- as.ppp(st_coordinates(q1_24_battles_sf), st_bbox(q1_24_battles_sf))\n\nWarning: data contain duplicated points\n\nbattlesQ224_ppp &lt;- as.ppp(st_coordinates(q2_24_battles_sf), st_bbox(q2_24_battles_sf))\n\nWarning: data contain duplicated points\n\n\n\n\n\nexpQ121_ppp &lt;- as.ppp(st_coordinates(q1_21_exp_sf), st_bbox(q1_21_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ221_ppp &lt;- as.ppp(st_coordinates(q2_21_exp_sf), st_bbox(q2_21_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ321_ppp&lt;- as.ppp(st_coordinates(q3_21_exp_sf), st_bbox(q3_21_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ421_ppp&lt;-as.ppp(st_coordinates(q4_21_exp_sf), st_bbox(q4_21_exp_sf))\n\nWarning: data contain duplicated points\n\n#2022\n\nexpQ122_ppp &lt;- as.ppp(st_coordinates(q1_22_exp_sf), st_bbox(q1_22_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ222_ppp &lt;- as.ppp(st_coordinates(q2_22_exp_sf), st_bbox(q2_22_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ322_ppp&lt;- as.ppp(st_coordinates(q3_22_exp_sf), st_bbox(q3_22_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ422_ppp&lt;-as.ppp(st_coordinates(q4_22_exp_sf), st_bbox(q4_22_exp_sf))\n\nWarning: data contain duplicated points\n\n#2023\nexpQ123_ppp &lt;- as.ppp(st_coordinates(q1_23_exp_sf), st_bbox(q1_23_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ223_ppp &lt;- as.ppp(st_coordinates(q2_23_exp_sf), st_bbox(q2_23_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ323_ppp&lt;- as.ppp(st_coordinates(q3_23_exp_sf), st_bbox(q3_23_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ423_ppp&lt;-as.ppp(st_coordinates(q4_23_exp_sf), st_bbox(q4_23_exp_sf))\n\nWarning: data contain duplicated points\n\n#2024\nexpQ124_ppp &lt;- as.ppp(st_coordinates(q1_24_exp_sf), st_bbox(q1_24_exp_sf))\n\nWarning: data contain duplicated points\n\nexpQ224_ppp &lt;- as.ppp(st_coordinates(q2_24_exp_sf), st_bbox(q2_24_exp_sf))\n\nWarning: data contain duplicated points\n\n\n\n\n\nstrat_devQ121_ppp &lt;- as.ppp(st_coordinates(q1_21_strat_dev_sf), st_bbox(q1_21_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ221_ppp &lt;- as.ppp(st_coordinates(q2_21_strat_dev_sf), st_bbox(q2_21_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ321_ppp&lt;- as.ppp(st_coordinates(q3_21_strat_dev_sf), st_bbox(q3_21_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ421_ppp&lt;-as.ppp(st_coordinates(q4_21_strat_dev_sf), st_bbox(q4_21_strat_dev_sf))\n\nWarning: data contain duplicated points\n\n#2022\nstrat_devQ122_ppp &lt;- as.ppp(st_coordinates(q1_22_strat_dev_sf), st_bbox(q1_22_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ222_ppp &lt;- as.ppp(st_coordinates(q2_22_strat_dev_sf), st_bbox(q2_22_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ322_ppp&lt;- as.ppp(st_coordinates(q3_22_strat_dev_sf), st_bbox(q3_22_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ422_ppp&lt;-as.ppp(st_coordinates(q4_22_strat_dev_sf), st_bbox(q4_22_strat_dev_sf))\n\nWarning: data contain duplicated points\n\n#2023\nstrat_devQ123_ppp &lt;- as.ppp(st_coordinates(q1_23_strat_dev_sf), st_bbox(q1_23_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ223_ppp &lt;- as.ppp(st_coordinates(q2_23_strat_dev_sf), st_bbox(q2_23_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ323_ppp&lt;- as.ppp(st_coordinates(q3_23_strat_dev_sf), st_bbox(q3_23_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ423_ppp&lt;-as.ppp(st_coordinates(q4_23_strat_dev_sf), st_bbox(q4_23_strat_dev_sf))\n\nWarning: data contain duplicated points\n\n#2024\nstrat_devQ124_ppp &lt;- as.ppp(st_coordinates(q1_24_strat_dev_sf), st_bbox(q1_24_strat_dev_sf))\n\nWarning: data contain duplicated points\n\nstrat_devQ224_ppp &lt;- as.ppp(st_coordinates(q2_24_strat_dev_sf), st_bbox(q2_24_strat_dev_sf))\n\nWarning: data contain duplicated points\n\n\n\n\n\ncivViolenceQ121_ppp &lt;- as.ppp(st_coordinates(q1_21_civViolence_sf), st_bbox(q1_21_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ221_ppp &lt;- as.ppp(st_coordinates(q2_21_civViolence_sf), st_bbox(q2_21_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ321_ppp&lt;- as.ppp(st_coordinates(q3_21_civViolence_sf), st_bbox(q3_21_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ421_ppp&lt;-as.ppp(st_coordinates(q4_21_civViolence_sf), st_bbox(q4_21_civViolence_sf))\n\nWarning: data contain duplicated points\n\n#2022\n\ncivViolenceQ122_ppp &lt;- as.ppp(st_coordinates(q1_22_civViolence_sf), st_bbox(q1_22_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ222_ppp &lt;- as.ppp(st_coordinates(q2_22_civViolence_sf), st_bbox(q2_22_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ322_ppp&lt;- as.ppp(st_coordinates(q3_22_civViolence_sf), st_bbox(q3_22_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ422_ppp&lt;-as.ppp(st_coordinates(q4_22_civViolence_sf), st_bbox(q4_22_civViolence_sf))\n\nWarning: data contain duplicated points\n\n#2023\ncivViolenceQ123_ppp &lt;- as.ppp(st_coordinates(q1_23_civViolence_sf), st_bbox(q1_23_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ223_ppp &lt;- as.ppp(st_coordinates(q2_23_civViolence_sf), st_bbox(q2_23_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ323_ppp&lt;- as.ppp(st_coordinates(q3_23_civViolence_sf), st_bbox(q3_23_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ423_ppp&lt;-as.ppp(st_coordinates(q4_23_civViolence_sf), st_bbox(q4_23_civViolence_sf))\n\nWarning: data contain duplicated points\n\n#2024\ncivViolenceQ124_ppp &lt;- as.ppp(st_coordinates(q1_24_civViolence_sf), st_bbox(q1_24_civViolence_sf))\n\nWarning: data contain duplicated points\n\ncivViolenceQ224_ppp &lt;- as.ppp(st_coordinates(q2_24_civViolence_sf), st_bbox(q2_24_civViolence_sf))\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n2.2.2 Converting the boundary to an owin object\nI will convert the regions_sf object to an owin object using the the as.owin() function.\n\nboundary_owin &lt;- as.owin(regions_sf)\n\nOnce we have our ppp objects and owin object, we can start combining them to one object which can then be passed through the density() function.\n\nBattlesExplosionsStrategic DevelopmentsViolence Against Civilians\n\n\n\nbattlesQ121_ppp_com&lt;- battlesQ121_ppp[boundary_owin]\nbattlesQ121_ppp_com&lt;- rescale(battlesQ121_ppp_com, 1000, \"km\") \n\n\nbattlesQ221_ppp_com&lt;- battlesQ221_ppp[boundary_owin]\nbattlesQ221_ppp_com&lt;- rescale(battlesQ221_ppp_com, 1000, \"km\") \n\n\nbattlesQ321_ppp_com&lt;- battlesQ321_ppp[boundary_owin]\nbattlesQ321_ppp_com&lt;- rescale(battlesQ321_ppp_com, 1000, \"km\") \n\nbattlesQ421_ppp_com&lt;- battlesQ421_ppp[boundary_owin]\nbattlesQ421_ppp_com&lt;- rescale(battlesQ421_ppp_com, 1000, \"km\")\n\n#2022\n \nbattlesQ122_ppp_com&lt;- battlesQ122_ppp[boundary_owin]\nbattlesQ122_ppp_com&lt;- rescale(battlesQ122_ppp_com, 1000, \"km\")\n\nbattlesQ222_ppp_com&lt;- battlesQ222_ppp[boundary_owin]\nbattlesQ222_ppp_com&lt;- rescale(battlesQ222_ppp_com, 1000, \"km\")\n\nbattlesQ322_ppp_com&lt;- battlesQ322_ppp[boundary_owin]\nbattlesQ322_ppp_com&lt;- rescale(battlesQ322_ppp_com, 1000, \"km\")\n\nbattlesQ422_ppp_com&lt;- battlesQ422_ppp[boundary_owin]\nbattlesQ422_ppp_com&lt;- rescale(battlesQ422_ppp_com, 1000, \"km\")                                                                                \n#2023\n                                      \nbattlesQ123_ppp_com&lt;- battlesQ123_ppp[boundary_owin]\nbattlesQ123_ppp_com&lt;- rescale(battlesQ123_ppp_com, 1000, \"km\")\n\nbattlesQ223_ppp_com&lt;- battlesQ223_ppp[boundary_owin]\nbattlesQ223_ppp_com&lt;- rescale(battlesQ223_ppp_com, 1000, \"km\")\n\nbattlesQ323_ppp_com&lt;- battlesQ323_ppp[boundary_owin]\nbattlesQ323_ppp_com&lt;- rescale(battlesQ323_ppp_com, 1000, \"km\")\n\nbattlesQ423_ppp_com&lt;- battlesQ423_ppp[boundary_owin]\nbattlesQ423_ppp_com&lt;- rescale(battlesQ423_ppp_com, 1000, \"km\")\n\n#2024\n\nbattlesQ124_ppp_com&lt;- battlesQ124_ppp[boundary_owin]\nbattlesQ124_ppp&lt;- rescale(battlesQ124_ppp_com, 1000, \"km\")\n\nbattlesQ224_ppp_com&lt;- battlesQ224_ppp[boundary_owin]\nbattlesQ224_ppp_com&lt;- rescale(battlesQ224_ppp_com, 1000, \"km\")\n\n\n\n\nexpQ121_ppp_com&lt;- expQ121_ppp[boundary_owin]\nexpQ121_ppp_com&lt;- rescale(expQ121_ppp_com, 1000, \"km\")\n\nexpQ221_ppp_com&lt;- expQ221_ppp[boundary_owin]\nexpQ221_ppp_com&lt;- rescale(expQ221_ppp_com, 1000, \"km\")\n\nexpQ321_ppp_com&lt;- expQ321_ppp[boundary_owin]\nexpQ321_ppp_com&lt;- rescale(expQ321_ppp_com, 1000, \"km\") \n\nexpQ421_ppp_com&lt;- expQ421_ppp[boundary_owin]\nexpQ421_ppp_com&lt;- rescale(expQ421_ppp_com, 1000, \"km\")\n\n#2022\n \nexpQ122_ppp_com&lt;- expQ122_ppp[boundary_owin]\nexpQ122_ppp_com&lt;- rescale(expQ122_ppp_com, 1000, \"km\")\n\nexpQ222_ppp_com&lt;- expQ222_ppp[boundary_owin]\nexpQ222_ppp_com&lt;- rescale(expQ222_ppp_com, 1000, \"km\")\n\nexpQ322_ppp_com&lt;- expQ322_ppp[boundary_owin]\nexpQ322_ppp_com&lt;- rescale(expQ322_ppp_com, 1000, \"km\")\n\nexpQ422_ppp_com&lt;- expQ422_ppp[boundary_owin]\nexpQ422_ppp_com&lt;- rescale(expQ422_ppp_com, 1000, \"km\") \n\n#2023\n                                      \n \nexpQ123_ppp_com&lt;- expQ123_ppp[boundary_owin]\nexpQ123_ppp&lt;- rescale(expQ123_ppp_com, 1000, \"km\")\n\n \nexpQ223_ppp_com&lt;- expQ223_ppp[boundary_owin]\nexpQ223_ppp_com&lt;- rescale(expQ223_ppp_com, 1000, \"km\")\n\n \nexpQ323_ppp_com&lt;- expQ323_ppp[boundary_owin]\nexpQ323_ppp_com&lt;- rescale(expQ323_ppp_com, 1000, \"km\")\n\n \nexpQ423_ppp_com&lt;- expQ423_ppp[boundary_owin]\nexpQ423_ppp_com&lt;- rescale(expQ423_ppp_com, 1000, \"km\")\n\n#2024\n\nexpQ124_ppp_com&lt;- expQ124_ppp[boundary_owin]\nexpQ124_ppp_com&lt;- rescale(expQ124_ppp_com, 1000, \"km\")\n\nexpQ224_ppp_com&lt;-expQ224_ppp[boundary_owin]\nexpQ224_ppp_com&lt;- rescale(expQ224_ppp_com, 1000, \"km\")\n\n\n\n\nstrat_devQ121_ppp_com&lt;- strat_devQ121_ppp[boundary_owin]\nstrat_devQ121_ppp_com&lt;- rescale(strat_devQ121_ppp_com, 1000, \"km\")\n\nstrat_devQ221_ppp_com&lt;- strat_devQ221_ppp[boundary_owin]\nstrat_devQ221_ppp_com&lt;- rescale(strat_devQ221_ppp_com, 1000, \"km\")\n\nstrat_devQ321_ppp_com&lt;- strat_devQ321_ppp[boundary_owin]\nstrat_devQ321_ppp_com&lt;- rescale(strat_devQ321_ppp_com, 1000, \"km\")\n\nstrat_devQ421_ppp_com&lt;- strat_devQ421_ppp[boundary_owin]\nstrat_devQ421_ppp_com&lt;- rescale(strat_devQ421_ppp_com, 1000, \"km\")\n\n#2022\n\nstrat_devQ122_ppp_com&lt;- strat_devQ122_ppp[boundary_owin]\nstrat_devQ122_ppp_com&lt;- rescale(strat_devQ122_ppp_com, 1000, \"km\")\n\nstrat_devQ222_ppp_com&lt;- strat_devQ222_ppp[boundary_owin]\nstrat_devQ222_ppp_com&lt;- rescale(strat_devQ222_ppp_com, 1000, \"km\")\n\nstrat_devQ322_ppp_com&lt;- strat_devQ322_ppp[boundary_owin]\nstrat_devQ322_ppp_com&lt;- rescale(strat_devQ322_ppp_com, 1000, \"km\")\n\nstrat_devQ422_ppp_com&lt;- strat_devQ422_ppp[boundary_owin]\nstrat_devQ422_ppp_com&lt;- rescale(strat_devQ422_ppp_com, 1000, \"km\")\n\n#2023\n                                      \n \nstrat_devQ123_ppp_com&lt;- strat_devQ123_ppp[boundary_owin]\nstrat_devQ123_ppp_com&lt;- rescale(strat_devQ123_ppp_com, 1000, \"km\")\n \nstrat_devQ223_ppp_com&lt;- strat_devQ223_ppp[boundary_owin]\nstrat_devQ223_ppp_com&lt;- rescale(strat_devQ223_ppp_com, 1000, \"km\")\n\nstrat_devQ323_ppp_com&lt;- strat_devQ323_ppp[boundary_owin]\nstrat_devQ323_ppp_com&lt;- rescale(strat_devQ323_ppp_com, 1000, \"km\")\n\nstrat_devQ423_ppp_com&lt;- strat_devQ423_ppp[boundary_owin]\nstrat_devQ423_ppp_com&lt;- rescale(strat_devQ423_ppp_com, 1000, \"km\")\n\n#2024\n\nstrat_devQ124_ppp_com&lt;- strat_devQ124_ppp[boundary_owin]\nstrat_devQ124_ppp_com&lt;- rescale(strat_devQ124_ppp_com, 1000, \"km\")\n\nstrat_devQ224_ppp_com&lt;-strat_devQ224_ppp[boundary_owin]\nstrat_devQ224_ppp_com&lt;- rescale(strat_devQ224_ppp_com, 1000, \"km\")\n\n\n\n\ncivViolenceQ121_ppp_com&lt;- civViolenceQ121_ppp[boundary_owin]\ncivViolenceQ121_ppp_com&lt;- rescale(civViolenceQ121_ppp_com, 1000, \"km\")\n\ncivViolenceQ221_ppp_com&lt;- civViolenceQ221_ppp[boundary_owin]\ncivViolenceQ221_ppp_com&lt;- rescale(civViolenceQ221_ppp_com, 1000, \"km\")\n \ncivViolenceQ321_ppp_com&lt;- civViolenceQ321_ppp[boundary_owin]\ncivViolenceQ321_ppp_com&lt;- rescale(civViolenceQ321_ppp_com, 1000, \"km\")\n\ncivViolenceQ421_ppp_com&lt;- civViolenceQ421_ppp[boundary_owin]\ncivViolenceQ421_ppp_com&lt;- rescale(civViolenceQ421_ppp_com, 1000, \"km\")\n\n#2022\n\ncivViolenceQ122_ppp_com&lt;- civViolenceQ122_ppp[boundary_owin]\ncivViolenceQ122_ppp_com&lt;- rescale(civViolenceQ122_ppp_com, 1000, \"km\")\n\ncivViolenceQ222_ppp_com&lt;- civViolenceQ222_ppp[boundary_owin]\ncivViolenceQ222_ppp_com&lt;- rescale(civViolenceQ222_ppp_com, 1000, \"km\")\n\ncivViolenceQ322_ppp_com&lt;- civViolenceQ322_ppp[boundary_owin]\ncivViolenceQ322_ppp_com&lt;- rescale(civViolenceQ322_ppp_com, 1000, \"km\")\n\ncivViolenceQ422_ppp_com&lt;- civViolenceQ422_ppp[boundary_owin]\ncivViolenceQ422_ppp_com&lt;- rescale(civViolenceQ422_ppp_com, 1000, \"km\")\n\n#2023\n                                      \ncivViolenceQ123_ppp_com&lt;- civViolenceQ123_ppp[boundary_owin]\ncivViolenceQ123_ppp_com&lt;- rescale(civViolenceQ123_ppp_com, 1000, \"km\")\n\ncivViolenceQ223_ppp_com&lt;- civViolenceQ223_ppp[boundary_owin]\ncivViolenceQ223_ppp_com&lt;- rescale(civViolenceQ223_ppp_com, 1000, \"km\")\n\ncivViolenceQ323_ppp_com&lt;- civViolenceQ323_ppp[boundary_owin]\ncivViolenceQ323_ppp_com&lt;- rescale(civViolenceQ323_ppp_com, 1000, \"km\")\n\ncivViolenceQ423_ppp_com&lt;- civViolenceQ423_ppp[boundary_owin]\ncivViolenceQ423_ppp_com&lt;- rescale(civViolenceQ423_ppp_com, 1000, \"km\")\n\n#2024\n\ncivViolenceQ124_ppp_com&lt;- civViolenceQ124_ppp[boundary_owin]\ncivViolenceQ124_ppp_com&lt;- rescale(civViolenceQ124_ppp_com, 1000, \"km\")\n\ncivViolenceQ224_ppp_com&lt;- civViolenceQ224_ppp[boundary_owin]\ncivViolenceQ224_ppp_com&lt;- rescale(civViolenceQ224_ppp_com, 1000, \"km\")"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-the-quarterly-kde-layers",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-the-quarterly-kde-layers",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "1.3 Computing the quarterly KDE Layers",
    "text": "1.3 Computing the quarterly KDE Layers\nI will now use the combined ppp object to derive the quarterly KDE layers, sorted by the different conflict types. I will use the bw.CvL method to derive the sigma value as I have found that that function results in the most perceivable KDE map for my dataset.\n\nBattlesExplosionsStrategic DevelopmentsViolence against Civilians\n\n\n\n2021202220232024\n\n\n\nbat_q121_kde&lt;- density(battlesQ121_ppp_com, sigma=bw.CvL(battlesQ121_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nbat_q221_kde&lt;-density(battlesQ221_ppp_com, sigma=bw.CvL(battlesQ221_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q321_kde&lt;-density(battlesQ321_ppp_com, sigma=bw.CvL(battlesQ321_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q421_kde&lt;-density(battlesQ421_ppp_com, sigma=bw.CvL(battlesQ421_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(bat_q121_kde, main=\"Battles in 1st Quarter of 2021\")\nplot(bat_q221_kde, main=\"Battles in 2nd Quarter of 2021\")\nplot(bat_q321_kde, main=\"Battles in 3rd Quarter of 2021\")\nplot(bat_q421_kde, main=\"Battles in 4th Quarter of 2021\")\n\n\n\n\n\n\n\n\n\n\n\nbat_q122_kde&lt;- density(battlesQ122_ppp_com, sigma=bw.CvL(battlesQ122_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nbat_q222_kde&lt;-density(battlesQ222_ppp_com, sigma=bw.CvL(battlesQ222_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q322_kde&lt;-density(battlesQ322_ppp_com, sigma=bw.CvL(battlesQ322_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q422_kde&lt;-density(battlesQ422_ppp_com, sigma=bw.CvL(battlesQ422_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(bat_q122_kde, main=\"Battles in 1st Quarter of 2022\")\nplot(bat_q222_kde, main=\"Battles in 2nd Quarter of 2022\")\nplot(bat_q322_kde, main=\"Battles in 3rd Quarter of 2022\")\nplot(bat_q422_kde, main=\"Battles in 4th Quarter of 2022\")\n\n\n\n\n\n\n\n\n\n\n\nbat_q123_kde&lt;- density(battlesQ123_ppp_com, sigma=bw.CvL(battlesQ123_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nbat_q223_kde&lt;-density(battlesQ223_ppp_com, sigma=bw.CvL(battlesQ223_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q323_kde&lt;-density(battlesQ323_ppp_com, sigma=bw.CvL(battlesQ323_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nbat_q423_kde&lt;-density(battlesQ423_ppp_com, sigma=bw.CvL(battlesQ423_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(bat_q123_kde, main=\"Battles in 1st Quarter of 2023\")\nplot(bat_q223_kde, main=\"Battles in 2nd Quarter of 2023\")\nplot(bat_q323_kde, main=\"Battles in 3rd Quarter of 2023\")\nplot(bat_q423_kde, main=\"Battles in 4th Quarter of 2023\")\n\n\n\n\n\n\n\n\n\n\n\nbat_q124_kde&lt;- density(battlesQ124_ppp_com, sigma=bw.CvL(battlesQ124_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nbat_q224_kde&lt;-density(battlesQ224_ppp_com, sigma=bw.CvL(battlesQ224_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(1,2))\nplot(bat_q124_kde, main=\"Battles in 1st Quarter of 2024\")\nplot(bat_q224_kde, main=\"Battles in 2nd Quarter of 2024\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\nexp_q121_kde&lt;- density(expQ121_ppp_com, sigma=bw.CvL(expQ121_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nexp_q221_kde&lt;-density(expQ221_ppp_com, sigma=bw.CvL(expQ221_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q321_kde&lt;-density(expQ321_ppp_com, sigma=bw.CvL(expQ321_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q421_kde&lt;-density(expQ421_ppp_com, sigma=bw.CvL(expQ421_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(exp_q121_kde, main=\"Explosions in 1st Quarter of 2021\")\nplot(exp_q221_kde, main=\"Explosions in 2nd Quarter of 2021\")\nplot(exp_q321_kde, main=\"Explosions in 3rd Quarter of 2021\")\nplot(exp_q421_kde, main=\"Explosions in 4th Quarter of 2021\")\n\n\n\n\n\n\n\n\n\n\n\nexp_q122_kde&lt;- density(expQ122_ppp_com, sigma=bw.CvL(expQ122_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nexp_q222_kde&lt;-density(expQ222_ppp_com, sigma=bw.CvL(expQ222_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q322_kde&lt;-density(expQ322_ppp_com, sigma=bw.CvL(expQ322_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q422_kde&lt;-density(expQ422_ppp_com, sigma=bw.CvL(expQ422_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(exp_q122_kde, main=\"Explosions in 1st Quarter of 2022\")\nplot(exp_q222_kde, main=\"Explosions in 2nd Quarter of 2022\")\nplot(exp_q322_kde, main=\"Explosions in 3rd Quarter of 2022\")\nplot(exp_q422_kde, main=\"Explosions in 4th Quarter of 2022\")\n\n\n\n\n\n\n\n\n\n\n\nexp_q123_kde&lt;- density(expQ123_ppp_com, sigma=bw.CvL(expQ123_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nexp_q223_kde&lt;-density(expQ223_ppp_com, sigma=bw.CvL(expQ223_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q323_kde&lt;-density(expQ323_ppp_com, sigma=bw.CvL(expQ323_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nexp_q423_kde&lt;-density(expQ423_ppp_com, sigma=bw.CvL(expQ423_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(exp_q123_kde, main=\"Explosions in 1st Quarter of 2023\")\nplot(exp_q223_kde, main=\"Explosions in 2nd Quarter of 2023\")\nplot(exp_q323_kde, main=\"Explosions in 3rd Quarter of 2023\")\nplot(exp_q423_kde, main=\"Explosions in 4th Quarter of 2023\")\n\n\n\n\n\n\n\n\n\n\n\nexp_q124_kde&lt;- density(expQ124_ppp_com, sigma=bw.CvL(expQ124_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nexp_q224_kde&lt;-density(expQ224_ppp_com, sigma=bw.CvL(expQ224_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot(exp_q124_kde, main=\"Explosions in 1st Quarter of 2024\")\nplot(exp_q224_kde, main=\"Explosions in 2nd Quarter of 2024\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\nstrat_dev_q121_kde&lt;- density(strat_devQ121_ppp_com, sigma=bw.CvL(strat_devQ121_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nstrat_dev_q221_kde&lt;-density(strat_devQ221_ppp_com, sigma=bw.CvL(strat_devQ221_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q321_kde&lt;-density(strat_devQ321_ppp_com, sigma=bw.CvL(strat_devQ321_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q421_kde&lt;-density(strat_devQ421_ppp_com, sigma=bw.CvL(strat_devQ421_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(strat_dev_q121_kde, main=\"Strategic Developments in 1st Quarter of 2021\")\nplot(strat_dev_q221_kde, main=\"Strategic Developments in 2nd Quarter of 2021\")\nplot(strat_dev_q321_kde, main=\"Strategic Developments in 3rd Quarter of 2021\")\nplot(strat_dev_q421_kde, main=\"Strategic Developments in 4th Quarter of 2021\")\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_q122_kde&lt;- density(strat_devQ122_ppp_com, sigma=bw.CvL(strat_devQ122_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nstrat_dev_q222_kde&lt;-density(strat_devQ222_ppp_com, sigma=bw.CvL(strat_devQ222_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q322_kde&lt;-density(strat_devQ322_ppp_com, sigma=bw.CvL(strat_devQ322_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q422_kde&lt;-density(strat_devQ422_ppp_com, sigma=bw.CvL(strat_devQ422_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(strat_dev_q122_kde, main=\"Strategic Developments in 1st Quarter of 2022\")\nplot(strat_dev_q222_kde, main=\"Strategic Developments in 2nd Quarter of 2022\")\nplot(strat_dev_q322_kde, main=\"Strategic Developments in 3rd Quarter of 2022\")\nplot(strat_dev_q422_kde, main=\"Strategic Developments in 4th Quarter of 2022\")\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_q123_kde&lt;- density(strat_devQ123_ppp_com, sigma=bw.CvL(strat_devQ123_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nstrat_dev_q223_kde&lt;-density(strat_devQ223_ppp_com, sigma=bw.CvL(strat_devQ223_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q323_kde&lt;-density(strat_devQ323_ppp_com, sigma=bw.CvL(strat_devQ323_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\nstrat_dev_q423_kde&lt;-density(strat_devQ423_ppp_com, sigma=bw.CvL(strat_devQ423_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(strat_dev_q123_kde, main=\"Strategic Developments in 1st Quarter of 2023\")\nplot(strat_dev_q223_kde, main=\"Strategic Developments in 2nd Quarter of 2023\")\nplot(strat_dev_q323_kde, main=\"Strategic Developments in 3rd Quarter of 2023\")\nplot(strat_dev_q423_kde, main=\"Strategic Developments in 4th Quarter of 2023\")\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_q124_kde&lt;- density(strat_devQ124_ppp_com, sigma=bw.CvL(strat_devQ124_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\nstrat_dev_q224_kde&lt;-density(strat_devQ224_ppp_com, sigma=bw.CvL(strat_devQ224_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot(strat_dev_q124_kde, main=\"Strategic Developments in 1st Quarter of 2024\")\nplot(strat_dev_q224_kde, main=\"Strategic Developments in 2nd Quarter of 2024\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\ncivViolence_q121_kde&lt;- density(civViolenceQ121_ppp_com, sigma=bw.CvL(civViolenceQ121_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\ncivViolence_q221_kde&lt;-density(civViolenceQ221_ppp_com, sigma=bw.CvL(civViolenceQ221_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q321_kde&lt;-density(civViolenceQ321_ppp_com, sigma=bw.CvL(civViolenceQ321_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q421_kde&lt;-density(civViolenceQ421_ppp_com, sigma=bw.CvL(civViolenceQ421_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(civViolence_q121_kde, main=\"Violence Against Civilians in 1st Quarter of 2021\")\nplot(civViolence_q221_kde, main=\"Violence Against Civilians in 2nd Quarter of 2021\")\nplot(civViolence_q321_kde, main=\"Violence Against Civilians in 3rd Quarter of 2021\")\nplot(civViolence_q421_kde, main=\"Violence Against Civilians in 4th Quarter of 2021\")\n\n\n\n\n\n\n\n\n\n\n\ncivViolence_q122_kde&lt;- density(civViolenceQ122_ppp_com, sigma=bw.CvL(civViolenceQ122_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\ncivViolence_q222_kde&lt;-density(civViolenceQ222_ppp_com, sigma=bw.CvL(civViolenceQ222_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q322_kde&lt;-density(civViolenceQ322_ppp_com, sigma=bw.CvL(civViolenceQ322_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q422_kde&lt;-density(civViolenceQ422_ppp_com, sigma=bw.CvL(civViolenceQ422_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(civViolence_q122_kde, main=\"Violence Against Civilians in 1st Quarter of 2022\")\nplot(civViolence_q222_kde, main=\"Violence Against Civilians in 2nd Quarter of 2022\")\nplot(civViolence_q322_kde, main=\"Violence Against Civilians in 3rd Quarter of 2022\")\nplot(civViolence_q422_kde, main=\"Violence Against Civilians in 4th Quarter of 2022\")\n\n\n\n\n\n\n\n\n\n\n\ncivViolence_q123_kde&lt;- density(civViolenceQ123_ppp_com, sigma=bw.CvL(civViolenceQ123_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\ncivViolence_q223_kde&lt;-density(civViolenceQ223_ppp_com, sigma=bw.CvL(civViolenceQ223_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q323_kde&lt;-density(civViolenceQ323_ppp_com, sigma=bw.CvL(civViolenceQ323_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\ncivViolence_q423_kde&lt;-density(civViolenceQ423_ppp_com, sigma=bw.CvL(civViolenceQ423_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\npar(mfrow=c(2,2))\nplot(civViolence_q123_kde, main=\"Violence Against Civilians in 1st Quarter of 2023\")\nplot(civViolence_q223_kde, main=\"Violence Against Civilians in 2nd Quarter of 2023\")\nplot(civViolence_q323_kde, main=\"Violence Against Civilians in 3rd Quarter of 2023\")\nplot(civViolence_q423_kde, main=\"Violence Against Civilians in 4th Quarter of 2023\")\n\n\n\n\n\n\n\n\n\n\n\ncivViolence_q124_kde&lt;- density(civViolenceQ124_ppp_com, sigma=bw.CvL(civViolenceQ124_ppp_com), edge=TRUE, kernel=\"gaussian\") \n\ncivViolence_q224_kde&lt;-density(civViolenceQ224_ppp_com, sigma=bw.CvL(civViolenceQ224_ppp_com), edge=TRUE, kernel=\"gaussian\")\n\n\n\npar(mfrow=c(1,2))\nplot(civViolence_q124_kde, main=\"Violence Against Civilians in 1st Quarter of 2024\")\nplot(civViolence_q224_kde, main=\"Violence Against Civilians in 2nd Quarter of 2024\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-second-order-spatial-point-process-analysis",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-second-order-spatial-point-process-analysis",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "1.4 Computing Second Order Spatial point Process analysis",
    "text": "1.4 Computing Second Order Spatial point Process analysis\nIn this section, I will be computing the quarterly second order spatial point process analysis for each of the conflict types. I will be using the K- function to compute the analysis.This is because as seen from our KDE layers, density of points are on different scales for the different quarters and the K-function will allow us to analyse the spatial point with different scales.\n\nBattlesExplosions"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-layers",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-layers",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "1.5 Computing Spatio-Temporal KDE Layers",
    "text": "1.5 Computing Spatio-Temporal KDE Layers\n\nBattlesExplosionsStrategic DevelopmentsViolence Against Civilians\n\n\n\n2021202220232024\n\n\n\nbattle_st_21&lt;- quart_geo_bat %&gt;% \n  filter(year==\"2021\") %&gt;% \n  select(2,3)\n\nbattle_21_ppp&lt;- as.ppp(battle_st_21, coordinates=battle_st_21)\nbattle_21_owin&lt;- battle_21_ppp[boundary_owin]\n\nbattles_st_21_kde&lt;- spattemp.density(battle_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(battle_st_21$num_quarters)\n\n\nfor (i in tims2){\n  plot(battles_st_21_kde, i,\n  main = paste('STKDE of Q', i, \" 2021\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbattle_st_22&lt;- quart_geo_bat %&gt;% \n  filter(year==\"2022\") %&gt;% \n  select(2,3)\n\nbattle_22_ppp&lt;- as.ppp(battle_st_22, coordinates=battle_st_22)\nbattle_22_owin&lt;- battle_22_ppp[boundary_owin]\n\nbattles_st_22_kde&lt;- spattemp.density(battle_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nfor (i in tims2){\n  plot(battles_st_22_kde, i,\n  main = paste('STKDE of Q', i, \" 2022\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbattle_st_23&lt;- quart_geo_bat %&gt;% \n  filter(year==\"2023\") %&gt;% \n  select(2,3)\n\nbattle_23_ppp&lt;- as.ppp(battle_st_23, coordinates=battle_st_23)\nbattle_23_owin&lt;- battle_23_ppp[boundary_owin]\n\nbattles_st_23_kde&lt;- spattemp.density(battle_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nfor (i in tims2){\n  plot(battles_st_23_kde, i,\n  main = paste('STKDE of Q', i, \" 2023\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbattle_st_24&lt;- quart_geo_bat %&gt;% \n  filter(year==\"2024\") %&gt;% \n  select(2,3)\n\nbattle_24_ppp&lt;- as.ppp(battle_st_24, coordinates=battle_st_24)\nbattle_24_owin&lt;- battle_24_ppp[boundary_owin]\n\nbattles_st_24_kde&lt;- spattemp.density(battle_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(battle_st_24$num_quarters)\n\nfor (i in tims2){\n  plot(battles_st_24_kde, i,\n  main = paste('STKDE of Q', i, \" 2024\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\nExp_st_21&lt;- quart_geo_exp %&gt;% \n  filter(year==\"2021\") %&gt;% \n  select(2,3)\n\nExp_21_ppp&lt;- as.ppp(Exp_st_21, coordinates=Exp_st_21)\nExp_21_owin&lt;- Exp_21_ppp[boundary_owin]\n\nExp_st_21_kde&lt;- spattemp.density(Exp_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(Exp_st_21$num_quarters)\n\n\nfor (i in tims2){\n  plot(Exp_st_21_kde, i,\n  main = paste('STKDE of Q', i, \" 2021\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExp_st_22&lt;- quart_geo_exp %&gt;% \n  filter(year==\"2022\") %&gt;% \n  select(2,3)\n\nExp_22_ppp&lt;- as.ppp(Exp_st_22, coordinates=Exp_st_22)\nExp_22_owin&lt;- Exp_22_ppp[boundary_owin]\n\nExp_st_22_kde&lt;- spattemp.density(Exp_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(Exp_st_22$num_quarters)\n\n\nfor (i in tims2){\n  plot(Exp_st_22_kde, i,\n  main = paste('STKDE of Q', i, \" 2022\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExp_st_23&lt;- quart_geo_exp %&gt;% \n  filter(year==\"2023\") %&gt;% \n  select(2,3)\n\nExp_23_ppp&lt;- as.ppp(Exp_st_23, coordinates=Exp_st_23)\nExp_23_owin&lt;- Exp_23_ppp[boundary_owin]\n\nExp_st_23_kde&lt;- spattemp.density(Exp_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(Exp_st_23$num_quarters)\n\n\nfor (i in tims2){\n  plot(Exp_st_23_kde, i,\n  main = paste('STKDE of Q', i, \" 2023\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExp_st_24&lt;- quart_geo_exp %&gt;% \n  filter(year==\"2024\") %&gt;% \n  select(2,3)\n\nExp_24_ppp&lt;- as.ppp(Exp_st_24, coordinates=Exp_st_24)\nExp_24_owin&lt;- Exp_24_ppp[boundary_owin]\n\nExp_st_24_kde&lt;- spattemp.density(Exp_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(Exp_st_24$num_quarters)\n\nfor (i in tims2){\n  plot(Exp_st_24_kde, i,\n  main = paste('STKDE of Q', i, \" 2024\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\nstrat_dev_st_21&lt;- quart_geo_strat %&gt;% \n  filter(year==\"2021\") %&gt;% \n  select(2,3)\n\nstrat_dev_21_ppp&lt;- as.ppp(strat_dev_st_21, coordinates=strat_dev_st_21)\nstrat_dev_21_owin&lt;- strat_dev_21_ppp[boundary_owin]\n\nstrat_dev_st_21_kde&lt;- spattemp.density(strat_dev_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(strat_dev_st_21$num_quarters)\n\n\nfor (i in tims2){\n  plot(strat_dev_st_21_kde, i,\n  main = paste('STKDE of Q', i, \" 2021\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_st_22&lt;- quart_geo_strat %&gt;% \n  filter(year==\"2022\") %&gt;% \n  select(2,3)\n\nstrat_dev_22_ppp&lt;- as.ppp(strat_dev_st_22, coordinates=strat_dev_st_22)\nstrat_dev_22_owin&lt;- strat_dev_22_ppp[boundary_owin]\n\nstrat_dev_st_22_kde&lt;- spattemp.density(strat_dev_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(strat_dev_st_22$num_quarters)\n\n\nfor (i in tims2){\n  plot(strat_dev_st_22_kde, i,\n  main = paste('STKDE of Q', i, \" 2022\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_st_23&lt;- quart_geo_strat %&gt;% \n  filter(year==\"2023\") %&gt;% \n  select(2,3)\n\nstrat_dev_23_ppp&lt;- as.ppp(strat_dev_st_23, coordinates=strat_dev_st_23)\nstrat_dev_23_owin&lt;- strat_dev_23_ppp[boundary_owin]\n\nstrat_dev_st_23_kde&lt;- spattemp.density(strat_dev_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(strat_dev_st_23$num_quarters)\n\n\nfor (i in tims2){\n  plot(strat_dev_st_23_kde, i,\n  main = paste('STKDE of Q', i, \" 2023\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrat_dev_st_24&lt;- quart_geo_strat %&gt;% \n  filter(year==\"2024\") %&gt;% \n  select(2,3)\n\nstrat_dev_24_ppp&lt;- as.ppp(strat_dev_st_24, coordinates=strat_dev_st_24)\nstrat_dev_24_owin&lt;- strat_dev_24_ppp[boundary_owin]\n\nstrat_dev_st_24_kde&lt;- spattemp.density(strat_dev_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(strat_dev_st_24$num_quarters)\n\nfor (i in tims2){\n  plot(strat_dev_st_24_kde, i,\n  main = paste('STKDE of Q', i, \" 2024\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021202220232024\n\n\n\nciv_st_21&lt;- quart_geo_civ %&gt;% \n  filter(year==\"2021\") %&gt;% \n  select(2,3)\n\nciv_21_ppp&lt;- as.ppp(civ_st_21, coordinates=civ_st_21)\nciv_21_owin&lt;- civ_21_ppp[boundary_owin]\n\nciv_st_21_kde&lt;- spattemp.density(civ_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(civ_st_21$num_quarters)\n\n\nfor (i in tims2){\n  plot(civ_st_21_kde, i,\n  main = paste('STKDE of Q', i, \" 2021\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nciv_st_22&lt;- quart_geo_civ %&gt;% \n  filter(year==\"2022\") %&gt;% \n  select(2,3)\nciv_22_ppp&lt;- as.ppp(civ_st_22, coordinates=civ_st_22)\nciv_22_owin&lt;- civ_22_ppp[boundary_owin]\n\nciv_st_22_kde&lt;- spattemp.density(civ_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(civ_st_22$num_quarters)\n\n\nfor (i in tims2){\n  plot(civ_st_22_kde, i,\n  main = paste('STKDE of Q', i, \" 2022\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nciv_st_23&lt;- quart_geo_civ %&gt;% \n  filter(year==\"2023\") %&gt;% \n  select(2,3)\n\nciv_23_ppp&lt;- as.ppp(civ_st_23, coordinates=civ_st_23)\nciv_23_owin&lt;- civ_23_ppp[boundary_owin]\n\nciv_st_23_kde&lt;- spattemp.density(civ_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(civ_st_23$num_quarters)\n\n\nfor (i in tims2){\n  plot(civ_st_23_kde, i,\n  main = paste('STKDE of Q', i, \" 2023\", sep=\"\"))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nciv_st_24&lt;- quart_geo_civ %&gt;% \n  filter(year==\"2024\") %&gt;% \n  select(2,3)\n\nciv_24_ppp&lt;- as.ppp(civ_st_24, coordinates=civ_st_24)\nciv_24_owin&lt;- civ_24_ppp[boundary_owin]\n\nciv_st_24_kde&lt;- spattemp.density(civ_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ntims2&lt;-unique(civ_st_24$num_quarters)\n\n\nfor (i in tims2){\n  plot(civ_st_24_kde, i,\n  main = paste('STKDE of Q', i, \" 2024\", sep=\"\"))\n}"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#second-order-spatio-temporal-kde",
    "href": "Take-Home_Exercises/Take-Home_Ex01/Take-Home_Ex01.html#second-order-spatio-temporal-kde",
    "title": "Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "1.6 Second-Order Spatio-Temporal KDE",
    "text": "1.6 Second-Order Spatio-Temporal KDE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "",
    "text": "In this Hands-on, I will be exploring how to compute Global Measures of Spatial Autocorrelation (GMSA) using the spdep package.\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\nFirst and foremost, I will download the necessary packages, mainly sf, tidyverse, spdep and tmap.\n\npacman:: p_load(sf, spdep, tidyverse, tmap )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "",
    "text": "In this Hands-on, I will be exploring how to compute Global Measures of Spatial Autocorrelation (GMSA) using the spdep package.\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\nFirst and foremost, I will download the necessary packages, mainly sf, tidyverse, spdep and tmap.\n\npacman:: p_load(sf, spdep, tidyverse, tmap )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#study-area-and-data",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.2 Study Area and Data",
    "text": "6.2 Study Area and Data\nFor this exercise, I will use 2 data sets:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n6.2.1 Importing the data\nFirst, I will use the st_read() function of the sf package to import the shapefiles into our R environment.\n\nhunan3 &lt;- st_read(dsn=\"data/geospatial\",\n                  layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\santhyats\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nI will also read the csv file into our environment using the read_csv() function.\n\nhunan2012_3&lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLastly, I will perform a relational join to join the attributes from the hunan2012_3 dataframe to the hunan3 dataframe. This is done by using the left_join() function of the dplyr package.\n\nhunan3 &lt;- left_join(hunan3,hunan2012_3) %&gt;% \n select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n6.2.2 Visualising Regional Development Indicators\nIn this section, we will plot a chloropeth map that will show us the distribution of GDPPC 2012. This will be done using the qtm() function of the tmap package.\n\nequal &lt;- tm_shape(hunan3) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan3) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.3 Global Measures of Spatial Autocorrelation",
    "text": "6.3 Global Measures of Spatial Autocorrelation\n\n6.3.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation, we would first need to derive the spatial weights of the study area. Spatial weights are the neighbourhood relationships between the spatial units.\nWe will derive the contiguity neighbours list using the poly2nb() function of the spdep package. By default, this function returns a matrice of neighbours of the spatial untis, derived by the Queen’s method.\n\nwm_q3 &lt;- poly2nb(hunan3, \n                queen=TRUE)\nsummary(wm_q3)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFrom the summary above, we see that there are a total of 88 spatial regions in hunan and the most connected region has 11 links. There are also 2 least connected regions with only one neighbour each.\n\n\n6.3.2 Row-standardized Weights Matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q3 &lt;- nb2listw(wm_q3, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q3\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation--morans-test",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation--morans-test",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.4 Global Measures of Spatial Autocorrelation- Moran’s Test",
    "text": "6.4 Global Measures of Spatial Autocorrelation- Moran’s Test\n\n6.4.1 Moran’s I Test\nIn this section, we will be performing the Maron’s I statistics test using the moran.test() function of the spdep package.\n\nmoran.test(hunan3$GDPPC, \n           listw=rswm_q3, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan3$GDPPC  \nweights: rswm_q3    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nFrom the statistics derived above, we see that the p-value is extremely small and that the alternate hypothesis is greater, enabling us to reject the null hypothesis (which states that there is no correlation between the weighted spatial units) and conclude that there is significant spatial autocorrelation between the weighted spatial units. This is further corroborated by the positive value of the Moran I Statistic.\nIn context, this means that counties with similar GDPPC Values are more close to one another spatially as compared to counties that have varying levels.\n\n\n6.4.2 Computing Monte Carlo Moran’s I Statistic\nWe will now perform the Monte Carlo Simulation for the Moran’s I Statistic using the moran.mc() function, also from the spdep package.\n\nset.seed(1234)\nbperm= moran.mc(hunan3$GDPPC, \n                listw=rswm_q3, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan3$GDPPC \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the statistics above, we once again see that the p-value is lower than 0.05, and we can reject the null hypothesis and accept the claim that the weighted spatial units are positively autocorrelated.\n\n\n6.4.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\",)\nabline(v=0, \n       col=\"purple\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation--gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation--gearys-c",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.5 Global Measures of Spatial Autocorrelation- Geary’s C",
    "text": "6.5 Global Measures of Spatial Autocorrelation- Geary’s C\n\n6.5.1 Geary’s C Test\nIn this section, I will be performing the Geary’s C test using the geary.test() function, also from the spdep package.\n\ngeary.test(hunan3$GDPPC, listw=rswm_q3)\n\n\n    Geary C test under randomisation\n\ndata:  hunan3$GDPPC \nweights: rswm_q3   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nFrom the statistics above, I see that the Geary C statistic has a postivie value and the p-value is very small. This indicates that the null hypothesis (which states that the weighted spatial units are randomly distributed) is rejected and the weighted spatial units are concluded to be spatially correlated.\n\n\n6.5.2 Computing Monte Carlo Geary’s C\nWe will perform the permutations of the Monte Carlo simulation using the geary.mc() function of the spdep package.\n\nset.seed(1234)\nbperm=geary.mc(hunan3$GDPPC, \n               listw=rswm_q3, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan3$GDPPC \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n6.5.3 Visualising the Monte Carlo Geary’s C\nWe will once again plot a histogram to reveal the distribution of the values in the Monte Carlo simulation.\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.6 Spatial Correlogram",
    "text": "6.6 Spatial Correlogram\nSpatial Correlograms are plots that show how correlated pairs of spatial observations are when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. In this section, we will be plotting the coreelograms for the two tests that we have explored so far.\n\n6.6.1 Compute Moran I’s Correlogram\nTo achieve this, we will be using the sp.correlogram() function of the spdep package.\n\nMI_corr &lt;- sp.correlogram(wm_q3, \n                          hunan3$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nFrom the plot above, we see that as the distance increases, the distribution of the values of the Moran I’s test becomes more negative, indicating that with larger distances, the spatial autocorrelation of the weighted spatial units decrease.\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan3$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n6.6.2 Computing Geary C’s Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q3, \n                          hunan3$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilarly, we will derive the analysis report\n\nprint(GC_corr)\n\nSpatial correlogram for hunan3$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-measures-of-spatial-autocorrelation",
    "title": "6 Global and Local measures of Spatial Association",
    "section": "6.7 Local Measures of Spatial Autocorrelation",
    "text": "6.7 Local Measures of Spatial Autocorrelation\n\n6.7.1 Computing Local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan3$County)\nlocalMI &lt;- localmoran(hunan3$GDPPC, rswm_q3)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nWe can make use of the printCoefmat() to list the contents of the local Moran matrix.\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan3$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830"
  }
]