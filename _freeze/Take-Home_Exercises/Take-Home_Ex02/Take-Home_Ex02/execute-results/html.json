{
  "hash": "686151d509282283456a59280a286c93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level\"\nauthor: \"Santhya Selvan\"\ndate: \"23 September 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 2.0 Overview\n\nDrug use in Thailand is a prevalent problem and has been on the rise in recent years. Being in the drug trafficking routes from the Golden Triangle, the major source of methamphetamine in Southeast Asia, it has naturally faced an increased frequency of this crisis. In this exercise, I will be analysing the distribution of drug-related offences in Thailand at the provincial level and observing for any spatial patterns in them. I will also be performing deploying appropriate analysis methods to observe for presence of hot and cold spots.\n\n## 2.1 Getting Started\n\n#### 2.1.1 Loading the necessary packages\n\nFirst and foremost, I will load the packages that we will be using in this exercise using the *p_load()* function of **pacman.** The packages we will use in this exercise are the following:\n\n**sf**: Used in spatial data wrangling\n\n**tidyverse**: Used in data wrangling for non-spatial data\n\n**tmap**: For functions relating to mapping point patterns\n\n**sfdep:** Functions that support Exploratory Data Analysis and is compatible with the sf and tidyverse packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, sfdep)\n```\n:::\n\n\n#### 2.1.2 Loading in the Datasets\n\nThese are the datafiles I will be using for this exercise:\n\n-   Thai_Drug_Offences_2017-2022.csv is a csv file containing the data about the locations of drug offences in Thailand.\n\n-   Thai_Admin1_2022 is a shapefile that contains the provincial boundaries of Thailand.\n\nI will first load in the csv file using the *read_csv()* function, and save it into the `Thai_doff` dataframe. After looking at the downloaded data, I will be able to select only the columns that are needed for this exercise.\n\nI will further group rows according to the province and total up the number of cases for each province. This is done with the help of the *group_by()* function to group the rows according to the province, and then using the *summarise()* and *sum()* functions to sum up the number of cases in each province and save it in a new column called 'total_count'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff <- read_csv(\"data/aspatial/Thai_Drug_Offences_2017-2022.csv\") %>%\n  select(1, 2, 3, 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nThai_doff <- Thai_doff %>% \n  group_by(fiscal_year, province_en) %>% \n  summarise('total_count'= sum(`no_cases`))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'fiscal_year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\nNext, I will load in the shapefile and save it to `Thai_bounds` using the *st_read()* function. After observing the dataframe, I will also drop the columns that are not needed for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_bounds <- st_read(dsn = \"data/geospatial\",\n                       layer = \"Thai_Admin1_2022\") %>%\n  select(1:3, 17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Thai_Admin1_2022' from data source \n  `C:\\santhyats\\IS415-GAA\\Take-Home_Exercises\\Take-Home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nFinally, I will perform a left join of the *Thai_bounds* dataframe to the `Thai_doff` dataframe using the province names. This will be done using the *left_join()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff<- left_join(Thai_doff, Thai_bounds, by= c(\"province_en\" = \"ADM1_EN\")) %>% \n  drop_na()\n```\n:::\n\n\n#### 2.1.3 Visualising the Data Over the Years\n\nI will now plot the layers on a chloropleth map to observe the distribution of the drug offences in Thailand. The following functions are used to achieve this:\n\n-   *tm_shape()* to plot the provincial boundaries,\n\n-   *tm_fill()* to map out the the variable of interest- the number of drug abuse cases\n\n-   *tm_borders(), tm_layout()* to format the look of the maps.\n\nBut when I tried to plot the maps, I encountered an error indicating that Thai_doff was not an sf object. I checked the type of object and found that it is a list!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(Thai_doff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\nAs such, I will convert the object to a sf dataframe before continuing. To do this, I will use the *data.frame()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff <- Thai_doff %>% st_as_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Thai_doff) +\n  tm_fill(\"total_count\",\n          n = 5,\n          style = \"quantile\",\n          palette = \"Purples\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\") +\n  tm_facets(by = 'fiscal_year')\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nBefore we can proceed, I will create new data frames by segmenting our `Thai_doff` by years. This will help us in our analysis the spatial autocorrelation over time later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyears <- list(17, 18, 19, 20, 21, 22)\n\nfor (i in years) {\n  \n  vars <- paste('Thai_doff_', i, sep = '') \n  assign(vars, \n         Thai_doff %>% \n           filter(fiscal_year == paste('20', i, sep = '')))\n         \n}\n```\n:::\n\n\n## 2.2 Computing Weights of the Study Area\n\nThe first step in our analysis will be to come up with the spatial weights for our study area. Since our study area is constant over the time period and there was no change in the provincial boundaries of Thailand during the years 2017-2022, we can compute the spatial weights just once at the start of our analysis and use it for our yearly calculations.\n\n#### 2.2.1 Computing the Contiguity Spatial Weights\n\nI will use the *st_contiguity()* method from the **sfdep** package to derive the spatial neighbours of the spatial units and *st_weights()* is used to compute their respective weights and save it as a new variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  Thai_doff_wm<- Thai_doff_17 %>% \n  mutate(nb = st_contiguity(geometry),\n         wt= st_weights(nb, \n                        style='W'),\n         .before=1)\n```\n:::\n\n\nWhen I tried this, I encountered an error indicating the presence of units with no neighbours. Hence, I computed the neighbours list of the spatial units by themselves to identify the exact units causing the errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff_wm<- st_contiguity(Thai_doff_17$geometry)\n\nThai_doff_wm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 330 \nPercentage nonzero weights: 5.866667 \nAverage number of links: 4.4 \n1 region with no links:\n46\n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\nFrom the results above, we see that region 46 is the spatial unit with no neighbours, and that there are 2 disjoint clusters of spatial units-likely due to this unlinked region. Referring to the corresponding province name of the 46th spatial region in the geometry column of the Thai_doff_17 dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff_17$province_en[46]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Phuket\"\n```\n\n\n:::\n:::\n\n\nWe see that the region is Phuket. This corroborates with the fact that Phuket is an island off of the coast of mainland Thailand, thus falling out of the connected administrative boundaries. Since I do want to keep Phuket in the analysis, I will handle this issue by manually setting the neighbour of Phuket. I will set it to be region 37, Phang Nga, since it is geographically closest to Phuket. I will include an extra codeline to capture this, while keeping the rest of the code from earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff_wm <- Thai_doff_17 %>% \n  mutate(nb = st_contiguity(geometry), .before=1)\n\nThai_doff_wm$nb[[46]] <- as.integer(37)\n\nThai_doff_wm <- Thai_doff_wm %>%\n  mutate(wt = st_weights(nb, style = 'W'), \n         .before = 1) %>% \n  select(1,2)\n```\n:::\n\n\n## 2.3 Global Measures of Spatial Autocorrelation\n\n#### 2.2.3 Performing the Moran I's Test by Year\n\nFor this section, I will be conducting the Moran I's Test and the Moran I's Permutations test for the dataset according to each year.\n\n::: panel-tabset\n## 2017\n\n::: panel-tabset\n## Global Moran's I Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_17$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.2891, p-value = 0.01104\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.127509970      -0.013513514       0.003795253 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(982)\nglobal_moran_perm(Thai_doff_17$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.12751, observed rank = 96, p-value = 0.08\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nFrom the results above, we see that the Global Moran I's statistic is 0.128. This indicates that the spatial units with drug abuse cases were mildly positively correlated to one another in 2017. In simple terms, the spatial areas displayed clusters that had mild similarities to one another.\n:::\n\n## 2018\n\n::: panel-tabset\n## Global Moran I's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_18$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.0134, p-value = 0.02203\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.111791008      -0.013513514       0.003873097 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1235)\nglobal_moran_perm(Thai_doff_18$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.11179, observed rank = 94, p-value = 0.12\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nFrom the results, a p-value of 0.02203 is observed. With a p-value that is lower than the level of significance of 0.05, we can reject the null hypothesis and conclude that the spatial units are positively autocorrelated and hence display clustering. Moran I's statistic of 0.112 indicates a mild positive relationship between the units.\n:::\n\n## 2019\n\n::: panel-tabset\n## Global Moran I's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_19$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.3502, p-value = 0.009381\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.15065681       -0.01351351        0.00487949 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1236)\nglobal_moran_perm(Thai_doff_19$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.15066, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nThe small p-value indicates that the results differ significantly than what would be observed under randomisation. The results for the Moran I's statistics once again reflect the presence of mild clustering among the spatial units with the positive value of 0.151.\n:::\n\n## 2020\n\n::: panel-tabset\n## Global Moran I's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_20$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.8872, p-value = 0.02957\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.125756486      -0.013513514       0.005446309 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutation's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1237)\nglobal_moran_perm(Thai_doff_20$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.12576, observed rank = 99, p-value = 0.02\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nThe results observed in 2020 is similar to the previous years.\n:::\n\n## 2021\n\n::: panel-tabset\n## Global Moran I's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_21$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.7545, p-value = 0.002939\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.200458201      -0.013513514       0.006034402 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutations Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1238)\nglobal_moran_perm(Thai_doff_21$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.20046, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n:::\n\n## 2022\n\n::: panel-tabset\n## Global Moran I's Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(Thai_doff_22$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.922, p-value = 0.001739\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.216964758      -0.013513514       0.006221729 \n```\n\n\n:::\n:::\n\n\n## Moran I's Permutations Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1238)\nglobal_moran_perm(Thai_doff_20$total_count,\n                  Thai_doff_wm$nb,\n                  Thai_doff_wm$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.12576, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## 2.4 Local Measures of Spatial Autocorrelation\n\n#### 2.4.1 Local Moran's I\n\nIn this section, I will be computing the Local Moran's I statistics for the drug related offences and visualising them on maps. To achieve this, I will be using the *local_moran()* function of the **sfdep** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_moran17 <- Thai_doff_17 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n\nlocal_moran18 <- Thai_doff_18 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n\nlocal_moran19 <- Thai_doff_19 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n\nlocal_moran20 <- Thai_doff_20 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n\nlocal_moran21 <- Thai_doff_21 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n\nlocal_moran22 <- Thai_doff_22 %>% \n mutate(local_moran = local_moran(total_count, Thai_doff_wm$nb, Thai_doff_wm$wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran, names_sep = \"_\")\n```\n:::\n\n\nWe will now plot these statistics on maps using functions of the **tmap** package.\n\n::: panel-tabset\n## 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") +\ntm_shape(local_moran17) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2017\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")  +\ntm_shape(local_moran18) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2018\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") +\ntm_shape(local_moran19) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2019\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") +\ntm_shape(local_moran20) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2020\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") +\ntm_shape(local_moran21) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2021\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") +\ntm_shape(local_moran22) + \n  tm_fill(\"local_moran_ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"2022\",\n            main.title.size= 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"local_moran_ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n:::\n\nI see that throughout the years, more regions become positively autocorrelated, reflected by the darker orange areas in 2018 becoming green over the years. This indicates that areas with drastically different drug abuse cases in the earlier years, became more positively correlated with their neighbours as the years progressed. This may indicate that the drug abuse practices might have influenced neighbouring areas.\n\n#### 2.4.2 Visualising the LISA maps by Year\n\nI will now plot the LISA maps by year. To do this, I will first filter out the values that are significantly smaller than the significance level of 0.05. I will then plot it with the Local Moran I's statistic.\n\n::: panel-tabset\n## 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig17<- local_moran17 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(Thai_doff_17) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig17) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig18<- local_moran18 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(local_moran18) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig18) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig19<- local_moran19 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(local_moran19) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig19) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig20<- local_moran20 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(local_moran20) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig20) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig21<- local_moran21 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(local_moran21) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig21) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig22<- local_moran22 %>% \n  filter(local_moran_p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(local_moran22) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig22) +\n  tm_fill(\"local_moran_mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n:::\n\nFrom the LISA maps, I observe a dip in the number of clusters of drug abuse cases from 2017 to 2018, and there seems to be minimal change in the years 2018 and 2019. However, from 2019-2020, I see more clusters of spatial units with similar number of drug abuse cases forming. In 2021, there appears to be a cold spot for drug-related offences in the western provinces. In the following year, while the cluster of cold spots have decreased, a new cluster of hotspots is observed in the North Eastern provinces.\n\n## 2.5 Hot/Cold Spot Analysis\n\nWe will first come up with a new weights matrix using the inverse distance method. To do this, we will follow our previous method, but instead of using *st_weights()* to come up with the weights, we will be using *st_inverse_distance()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_doff_wm_idw<- Thai_doff_17 %>% \n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry, scale=1, alpha=1),\n         .before=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nℹ In group 1: `fiscal_year = 2017`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n\nOnce we have our new dataframe containing the inverse distance weights matrix of the spatial units, we can go on to calculate the Gi\\* statistic for the drug abuse cases for each of the years. Following that, we will map them on different plots.\n\n#### 2.5.1 Computing the Gi\\* Statistics\n\n::: panel-tabset\n## 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa17<- Thai_doff_17%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n## 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa18<- Thai_doff_18%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n## 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa19<- Thai_doff_19%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n## 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa20<- Thai_doff_20%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa21<- Thai_doff_21%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcsa22<- Thai_doff_22%>% \n  mutate(local_GI = local_gstar_perm(\n    total_count, Thai_doff_wm_idw$nb, Thai_doff_wm_idw$wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n:::\n\n#### 2.5.2 Visualising the Gi\\* Statistic\n\nI will now be plotting the Gi\\* Statistic on maps so we can better visualise the hot spot and cold spot areas of drug abuse cases in Thailand over the 6 years.\n\n::: panel-tabset\n## 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig17 <- hcsa17 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa17)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig17) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n## 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig18 <- hcsa18 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa18)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig18) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig19 <- hcsa19 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa19)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig19) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n## 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig20 <- hcsa20 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa20)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig20) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig21 <- hcsa21 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa21)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig21) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig22 <- hcsa22 %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(hcsa22)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig22) +\n  tm_fill(\"gi_star\",\n          palette = \"-RdYlGn\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n:::\n\nThe Gi\\* statistics plot once again confirm the cold and hotspots observed by the LISA plots earlier. However, it further reveals a cold spot in the Northern Central provinces in 2017. These cold spots drop drastically in the years 2018-2019, further corroborating the pattern revealed by the Local Moran I plots regarding the increase in the drug abuse cases in the neighbouring spatial units.\n\nI also observe that the capital city of Bangkok had been a hotspot for drug abuse in the years 2017-2020, but not in 2021-2022.\n\n## 2.6 Learning Points\n\nFrom this Take-Home Exercise, I have learnt:\n\n-   Using appropriate methods to import files of different data types\n\n-   The importance of looking through the data once it's been downloaded to the R environment to see what needs to be processed\n\n-   The importance of checking if the the downloaded data has been saved in an appropriate datatype that can be used in our analysis\n\n-   The importance of knowing the geograpahical area and its features earlier. (Accounting for disconnected boundaries and islands)\n\n-   Knowing alternate methods of handling the case where spatial units have missing neighbours\n\n-   Interpreting Global and Local Moran I's values in specific contexts\n\n-   Interpreting Lisa Maps and understanding their link to GI\\* statistic analysis\n",
    "supporting": [
      "Take-Home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}