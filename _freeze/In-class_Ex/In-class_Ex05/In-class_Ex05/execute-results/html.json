{
  "hash": "4dd99c932b09a4b3102373ec847ad1bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 5- Geographically Weighted Summary Statistics\"\nauthor: \"Santhya Selvan\"\ndate: \"September 16 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 5.0 Getting started\n\nFirstly, we will download the necessary packages into our environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, GWmodel)\n```\n:::\n\n\n#### 5.0.1 Downloading the data\n\nWe will then read the datafiles into sf objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf<- st_read(dsn='data/geospatial',\n                layer='Hunan')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012_sf<- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\nWe will now perform a left join of the 2 sf objects based on their common identifiers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf<-left_join(hunan_sf, hunan2012_sf) %>% \n  select(1:3, 7, 15, 16, 31, 32)\n```\n:::\n\n\nIt is recommended that we check for common columns with the same values before we perform the join, so that the tables can be joined using the column. We would also perform the join first before looking at the columns that are necessary for us and selecting them accordingly.\n\nWe can save this new sf object into a new rds file, so we can keep track of our processed data that we have used for the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n```\n:::\n\n\nIf we want to access this newly processed data, we will simply use the read_rds function and pass in the file path. We can make use of the echo: false to hide this code chunk on the render, so the data processing can be handled on the backend.\n\n\n::: {.cell}\n\n:::\n\n\n## 5.1 Visualising the prepared data\n\n### 5.1.1 Converting to SpatialPolygonDataframe\n\nGWmodel uses the sp data object to handle spatial data in r. As such, we will now convert our sf object to a spatial polygon dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp<- hunan_sf %>% \n  as_Spatial()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}