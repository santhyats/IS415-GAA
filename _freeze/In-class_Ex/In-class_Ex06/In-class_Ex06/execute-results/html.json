{
  "hash": "a4ec2a303bae717b53e01cb4e6eee91a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 6\"\nauthor: \"Santhya Selvan\"\ndate: \"23 September 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 2.0 Loading in the necessary packages\n\nIn this exercise, we will be exploring a new package, **sfdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, sfdep)\n```\n:::\n\n\n## 2.1 importing the data \n\n#### 2.1.1 Importing the Hunan shapefiles \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan4<-st_read(dsn=\"data/geospatial\", \n                layer=\"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\santhyats\\IS415-GAA\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n#### 2.1.2 importing the csv file \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan4_2012<- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n#### 2.1.3 Performing a left join of the sf dataframes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan4_GDPPC<- left_join(hunan4, hunan4_2012) %>% \n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\n## 2.2 Global measures of spatial association\n\n#### 2.2.1 Deriving queen contiguity weights sfdep methods \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q4<- hunan4_GDPPC %>% \n  mutate(nb=st_contiguity(geometry),\n         wt= st_weights(nb, \n                        style='W'),\n         .before=1)\n```\n:::\n\n\nThe *st_contiguity()* function of the **sfdep** package helps to add the neighbours to a dataframe instead of printing out the matrix. The *.before* attribute adds the new columns to the front of the sf table instead of the default back of the sf.\n\n#### 2.2.2 Computing Global Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI<- global_moran(wm_q4$GDPPC,\n                      wm_q4$nb,\n                      wm_q4$wt)\n\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n```\n\n\n:::\n:::\n\n\n#### 2.2.3 Performing the Global Moran's I Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q4$GDPPC,\n                  wm_q4$nb,\n                  wm_q4$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n\n\n:::\n:::\n\n\nThe p-value is incredibly small, indictaing that we reject the null hypothesis and conclude that the relationship between the neighbours differ significantly from the values as observed under a randomly spatially distributed neighbours. Next, looking at the Moran I statistic value of 0.3007, we can see that there is clustering present among the spatial units.\n\n#### 2.2.4 Performing Global Moran I's permutation Test \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nglobal_moran_perm(wm_q4$GDPPC,\n                  wm_q4$nb,\n                  wm_q4$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nSetting the seed allows us to ensure that our computations are reproducible. This allows us to get the same value every time we run the code chunk or render the document.\n\nFrom the results, we see that the p-value is once again really small, confirming that we will reject the null hypothesis....\n\n## 2.3 Computing Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa<- wm_q4 %>% \n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim=99),\n         .before=1) %>% \n  unnest(local_moran)\n```\n:::\n\n\nunnest() expands a column-list of dataframes to rows and columns.\n\n2.3.1 Visualising Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) + \n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) + \ntm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I\",\n            main.title.size= 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.2 Visualising LISA map\n\nLISA Map helps us to visualise outliers and clusters. High-Low and Low-High categories are considered as outliers whereas High-High and Low-Low categories are considered the clusters. The LISA map is an in interpreted map by combining the local Moran I's statistic of geographical areas and their respective p-values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig<- lisa %>% \n  filter(p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \n  tm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 2.4 Computing Local G-statistics \n\nG-statistics allow us to observe for hot and cold spots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw<- hunan4_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry, scale=1, alpha=1),\n         .before=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA<- wm_idw %>% \n  mutate(local_GI = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99), \n    .before = 1) %>% \n  unnest(local_GI)\n```\n:::\n\n\n#### 2.4.1 Visualising the Gi\\* statistics \n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA %>% \n  filter(p_sim <0.05)\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA)+\n  tm_polygons() +\n  tm_borders(alpha=0.5) +\n  tm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}