{
  "hash": "6a7f40b8516b5184b84e7c7fb59a182d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Ex 4\"\nauthor: \"Santhya Selvan\"\ndate: \"September 9 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 4.0 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, tidyverse, spatstat, sparr, tmap)\n```\n:::\n\n\nsf: data wrangling for spatial data\n\ntidyverse: data wrangling for non-spatial data\n\nraster: for handling raster data\n\ntmap: mapping functions\n\nspatstat: statistic analysis for spatial point process analysis\n\nsparr: statistic analysis for spatio-temporal data\n\n## 4.1 Importing the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstud_area <- st_read(ds ='data/rawdata', \n                     layer = 'Kepulauan_Bangka_Belitung') %>% \n  st_union() %>% \n  st_zm(drop = TRUE, what = 'ZM') %>% \n  st_transform(crs = 32748)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\santhyats\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nst_as_s2(): dropping Z and/or M coordinate\n```\n\n\n:::\n:::\n\n\n-   We use st_union() to dissolve the polygons into a single surface.\n\n-   st_zm () is used to drop the Z and M coordinates in the dataset.\n\n-   Finally, st_transform() is used to transform the coordinate reference system to that of Indonesia.\n\n#### 4.1.1 Converting to Owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstud_owin <- as.owin(stud_area)\nstud_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(stud_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n#### 4.1.2 Importing Forest Fire Data\n\nWe will now read the information from the csv file and save it as a sf dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- read_csv(\"data/rawdata/forestfires.csv\") %>%\n  st_as_sf(coords = c('longitude', 'latitude'),\n           crs=4326) %>% \n  st_transform(crs=32748)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nst_as_af() is used to take the longitude and langitude found in the csv file and transform it into spatial data that we can use.\n\nthe sequence of \"longitude\" and \"latitude\" should not be switched.\n\nIn the newly transformed dataframe, the longitude and latitude values are used to compute a new column called 'geometry', which contains the data for the point events\n\n#### 4.1.3 Preparing the Forest Fire Data (Time)\n\nFor our ppp object, we need the month to be in numeric form, so it is easier to manipulate time data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>% \n  mutate(DayOfYear = yday(acq_date)) %>% \n  mutate(Month_num = month(acq_date)) %>% \n  mutate(Month_fac = month(acq_date,\n                           label = TRUE,\n                           abbr = FALSE))\n```\n:::\n\n\n-   mutate() is used to add columns to our dataframe.\n\n-   here, we add three new columns, one for Day of Year, and 2 for months\n\n-   under the month columns, one column is reserved for the numeric representation of the months\n\n-   the other displays the month as the full form.\n\n## \n\n## 4.2 Visualising the fire points\n\nWe will not plot our study area indicating the fire events. Take note to always plot the base polygons and the shapes first, before we plot the point events.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(stud_area) + \n  tm_polygons() +\n  tm_shape(fire_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n#### 4.2.1 Visualising the Fire Events by Months\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(stud_area) +\n  tm_polygons() +\n  tm_shape(fire_sf) +\n  tm_dots(size = 0.1) +\n  tm_facets(by = 'Month_fac', \n            free.coords = FALSE,\n            drop.units= TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 4.3 Computing SKDE by Month\n\n#### 4.3.1 Preparing ppp object\n\nWe will prepare our ppp object in this stage. First, we select the necessary columns from our fire_sf dataframe. We only need the Month_numeric column. We save this to a new variable called fire_month\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month <- fire_sf %>% \n  select('Month_num')\n```\n:::\n\n\nIn order to use spatstat, we need a ppp object. Hence, we will convert our fire_month sf to a ppp object using the as.ppp() function as demonstrated below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_ppp <- as.ppp(fire_month)\nfire_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n```\n\n\n:::\n:::\n\n\n#### 4.3.2 Preparing Owin layer\n\nWe will now include our owin object from before to create our Owin layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_owin <- fire_month_ppp[stud_owin]\nsummary(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\n#### 4.3.3 Computing Spatio-Temporal KDE\n\nWe will use the spattemp.density() function to compute the kde of the fire_month_owin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n```\n\n\n:::\n:::\n\n\n4.3.4 Plotting the Spatio-Temporal KDE object\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\n\nfor(i in tims){\n  plot(st_kde, i, \n       override.par = FALSE, \n       fix.range = TRUE,\n       main=paste(\"KDE Of Month\", i))\n}\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}