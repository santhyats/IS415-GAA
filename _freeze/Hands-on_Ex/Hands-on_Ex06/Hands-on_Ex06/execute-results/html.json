{
  "hash": "fe9ac73c821b7b67963a0dc8f52c82bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"6 Global and Local measures of Spatial Association\"\nauthor: \"Santhya Selvan\"\ndate: \"September 19, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 6.1 Overview\n\nIn this Hands-on, I will be exploring how to compute Global Measures of Spatial Autocorrelation (GMSA) using the **spdep** package.\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\n\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.\n\nFirst and foremost, I will download the necessary packages, mainly sf, tidyverse, spdep and tmap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman:: p_load(sf, spdep, tidyverse, tmap )\n```\n:::\n\n\n## 6.2 Study Area and Data\n\nFor this exercise, I will use 2 data sets:\n\n-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\n\n-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n#### 6.2.1 Importing the data\n\nFirst, I will use the *st_read()* function of the sf package to import the shapefiles into our R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan3 <- st_read(dsn=\"data/geospatial\",\n                  layer=\"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\santhyats\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nI will also read the csv file into our environment using the *read_csv()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012_3<- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nLastly, I will perform a relational join to join the attributes from the *hunan2012_3* dataframe to the *hunan3* dataframe. This is done by using the *left_join()* function of the **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan3 <- left_join(hunan3,hunan2012_3) %>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}