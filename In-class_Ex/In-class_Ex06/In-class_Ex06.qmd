---
title: "In-class Exercise 6"
author: "Santhya Selvan"
date: "23 September 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 2.0 Loading in the necessary packages

In this exercise, we will be exploring a new package, **sfdep**.

```{r}
pacman::p_load(sf, tidyverse, tmap, sfdep)
```

## 2.1 importing the data

#### 2.1.1 Importing the Hunan shapefiles

```{r}
hunan4<-st_read(dsn="data/geospatial", 
                layer="Hunan")

```

#### 2.1.2 importing the csv file

```{r}
hunan4_2012<- read_csv("data/aspatial/Hunan_2012.csv")
```

#### 2.1.3 Performing a left join of the sf dataframes

```{r}
hunan4_GDPPC<- left_join(hunan4, hunan4_2012) %>% 
  select(1:4, 7, 15)
```

## 2.2 Global measures of spatial association

#### 2.2.1 Deriving queen contiguity weights sfdep methods

```{r}
wm_q4<- hunan4_GDPPC %>% 
  mutate(nb=st_contiguity(geometry),
         wt= st_weights(nb, 
                        style='W'),
         .before=1)
```

The *st_contiguity()* function of the **sfdep** package helps to add the neighbours to a dataframe instead of printing out the matrix. The *.before* attribute adds the new columns to the front of the sf table instead of the default back of the sf.

#### 2.2.2 Computing Global Moran's I

```{r}
moranI<- global_moran(wm_q4$GDPPC,
                      wm_q4$nb,
                      wm_q4$wt)

glimpse(moranI)
```

#### 2.2.3 Performing the Global Moran's I Test

```{r}
global_moran_test(wm_q4$GDPPC,
                  wm_q4$nb,
                  wm_q4$wt)
```

The p-value is incredibly small, indictaing that we reject the null hypothesis and conclude that the relationship between the neighbours differ significantly from the values as observed under a randomly spatially distributed neighbours. Next, looking at the Moran I statistic value of 0.3007, we can see that there is clustering present among the spatial units.

#### 2.2.4 Performing Global Moran I's permutation Test

```{r}
set.seed(1234)
global_moran_perm(wm_q4$GDPPC,
                  wm_q4$nb,
                  wm_q4$wt,
                  nsim=99)
```

Setting the seed allows us to ensure that our computations are reproducible. This allows us to get the same value every time we run the code chunk or render the document.

From the results, we see that the p-value is once again really small, confirming that we will reject the null hypothesis....

## 2.3 Computing Local Moran's I

```{r}
lisa<- wm_q4 %>% 
  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim=99),
         .before=1) %>% 
  unnest(local_moran)

```

unnest() expands a column-list of dataframes to rows and columns.

#### **2.3.1 Visualising Local Moran's I**

```{r}
tmap_mode("plot")
tm_shape(lisa) + 
  tm_fill("ii") +
  tm_borders(alpha = 0.5) + 
tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I",
            main.title.size= 2)
```

#### 2.3.2 Visualising LISA map

LISA Map helps us to visualise outliers and clusters. High-Low and Low-High categories are considered as outliers whereas High-High and Low-Low categories are considered the clusters. The LISA map is an in interpreted map by combining the local Moran I's statistic of geographical areas and their respective p-values.

```{r}
lisa_sig<- lisa %>% 
  filter(p_ii < 0.05)

tmap_mode("plot")

tm_shape(lisa) + 
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  
  tm_shape(lisa_sig) +
  tm_fill("mean") +
  tm_borders(alpha = 0.4)
```

## 2.4 Computing Local G-statistics

G-statistics allow us to observe for hot and cold spots

```{r}
wm_idw<- hunan4_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry, scale=1, alpha=1),
         .before=1)
```

```{r}
HCSA<- wm_idw %>% 
  mutate(local_GI = local_gstar_perm(
    GDPPC, nb, wt, nsim = 99), 
    .before = 1) %>% 
  unnest(local_GI)

```

#### 2.4.1 Visualising the Gi\* statistics

```{r}
HCSA_sig <- HCSA %>% 
  filter(p_sim <0.05)
tmap_mode('plot')
tm_shape(HCSA)+
  tm_polygons() +
  tm_borders(alpha=0.5) +
  tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```
