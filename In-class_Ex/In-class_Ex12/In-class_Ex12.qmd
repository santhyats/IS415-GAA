---
title: "In-class Exercise 12"
author: "Santhya Selvan"
date: "11 November 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## 12.0 Loading in the packages 

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)
```

## 12.1 Getting Started 

```{r}
mdata <- read_rds("data/rds/mdata.rds")
```

12.1.1 Preparing Data

First, we will take a sample of 1500 data points from our original data

```{r}
set.seed(1234)
HDB_sample <- mdata %>% 
  sample_n(1500)
```

check for overlapping points

```{r}
overlapping_points <- HDB_sample %>% 
  mutate(overlap = lengths(st_equals(., .)) > 1)
summary(overlapping_points$overlap)
```

We will then use the st_jitter() function to reduce the overlapping of the points.

```{r}
HDB_sample <- HDB_sample %>% 
  st_jitter(amount = 5)
```

Perform train test split

```{r}
set.seed(234)

resale_split <- initial_split(HDB_sample,
                              prop = 0.67/10,)

train_data <- training(resale_split)
test_data <- testing(resale_split)

write_rds(train_data, "data/rds/train_data.rds")
write_rds(test_data, "data/rds/test_data.rds")

```

Checking for multicollinearity

```{r}
mdata_nogeo <- mdata %>% 
  st_drop_geometry()

ggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])
```

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
olsrr::ols_regress(price_mlr)
```

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data = train_data,
                          approach = 'CV',
                          kernel = 'gaussian',
                          adaptive = TRUE,
                          longlat = FALSE)
```

```{r}
gwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                        data = test_data, 
                        bw = 20,
                        kernel = 'gaussian',
                        adaptive = TRUE,
                        longlat = FALSE)
```

```{r}
gwr_pred_df <- as.data.frame(
  gwr_pred$SDF$prediction) %>% 
  rename(gwr_pred = "gwr_pred$SDF$prediction")
```

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
train_data_nogeom <- train_data %>% 
  st_drop_geometry()

```

```{r}
set.seed(8932)

rf <- ranger(resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
             data = train_data_nogeom)
```

```{r}
test_data_nogeom <- cbind(
    test_data, coords_test) %>% st_drop_geometry()
```

```{r}
rf_pred <- predict(
    rf,
    data = test_data_nogeom
)
```

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>% 
  rename(rf_pred = "rf_pred$predictions")
```

```{r}
set.seed(2342)

grf_ad <- grf(
    formula = resale_price ~ floor_area_sqm +
        storey_order + remaining_lease_mths +
        PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
        PROX_MRT + PROX_PARK + PROX_MALL + 
        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
        WITHIN_1KM_PRISCH,
    dframe = train_data_nogeom,
    bw=20,
    kernel = 'adaptive',
    coords = coords_train)
```

```{r}

grf_pred <- predict.grf(
    grf_ad,
    test_data_nogeom,
    x.var.name = 'X',
    y.var.name = 'Y',
    local.w = 1,
    global.w = 0
)

grf_pred_df <- as.data.frame(grf_pred)
```

```{r}
test_data_pred <- test_data %>% 
    select(resale_price) %>% 
    cbind(gwr_pred_df) %>% 
    cbind(rf_pred_df) %>% 
    cbind(grf_pred_df)
```

```{r}
# transpose data
test_longer <- test_data_pred %>% 
    st_drop_geometry() %>% 
    pivot_longer(
        cols = ends_with('pred'),
        names_to = 'model',
        values_to = 'predicted'
    )
```

```{r}
# renaming
model_labels <- c(
    gwr_pred = "gwr",
    rf_pred = "Random Forest",
    grf_pred = "gwRF")

test_longer <- test_longer %>% 
    mutate(
        model = recode(model, !!!model_labels))
```

```{r}
rmse_results <- test_longer %>% 
    group_by(model) %>% 
    rmse(truth = resale_price, estimate = predicted) %>% 
    rename(rmse = .estimate) %>% 
    select(model, rmse)
```

```{r}
ggplot(rmse_results,
    aes(x=reorder(model, rmse),
        y=rmse,
        fill='skyblue'))+
    geom_bar(
        stat='identity',
        fill='skyblue',
        width=.7) +
    labs(title = "RMSE Comparison of Mod", y="RMSE", x="Model")
```

```{r}
#| eval: false
# scatter
test_longer <- test_longer %>% left_join(rmse_results, by = 'model')
ggplot(data=test_longer,
    aes(x=predicted, y=resale_price)) +
    facet_wrap(~model) +
    geom_point() +
    geom_text(data = test_longer, x=Inf, y=Inf, label=paste("RMSE:", round(rmse, 2)))
```

```{r}
# variable importance
var_imp <- data.frame(
    Variable=names(grf_ad$Global.Model$variable.importance),
    Importance= grf_ad$Global.Model$variable.importance
)

ggplot(var_imp, aes(x=reorder(Variable, Importance), y=Importance)) +
    geom_bar(stat = 'identity', fill='skyblue') +
    coord_flip() +  # for readability
    labs(
        title = "Variable Importance from Ranger Model",
        x = "Variables", y = "Importance"
    ) +
    theme_minimal()
```
